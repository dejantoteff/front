{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/choose_word/reducers.ts","dependencies":[{"path":"/home/just/repos/front/src/choose_word/reducers.ts","mtime":1519157692260},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../constants\");\nconst initialState = {\n    ready: false,\n};\nfunction chooseWordStore(state = initialState, action) {\n    switch (action.type) {\n        // setting the new question instance\n        case constants_1.CHOOSE_WORD_SET_NEXT:\n            return Object.assign({}, state, { correctAnswer: action.payload.correctAnswer, currentIndex: action.payload.currentIndex, currentInstance: action.payload.currentInstance, index: 0, listen: true, question: action.payload.question });\n        // go to the next word of the question\n        case constants_1.CHOOSE_WORD_SET_INDEX:\n            return Object.assign({}, state, { index: state.index + 1 });\n        // end of question is reached\n        case constants_1.CHOOSE_WORD_STOP:\n            return Object.assign({}, state, { index: state.index + 1, listen: false, question: [[]] });\n        // component is filled with all the required data\n        case constants_1.CHOOSE_WORD_READY:\n            return Object.assign({}, state, { ready: true });\n        // initialization is ready\n        case constants_1.CHOOSE_WORD_INIT_READY:\n            return Object.assign({}, state, { currentIndex: -1, db: action.payload.db, fillerWords: action.payload.fillerWords });\n        /**\n         * Clean-up the state\n         */\n        case constants_1.CHOOSE_WORD_UNMOUNT:\n            return Object.assign({}, state, initialState);\n        default:\n            return state;\n    }\n}\nexports.chooseWordStore = chooseWordStore;\n",{"version":3,"file":"/home/just/repos/front/src/choose_word/reducers.ts","sourceRoot":"","sources":["/home/just/repos/front/src/choose_word/reducers.ts"],"names":[],"mappings":";;AAAA,4CAOqB;AAErB,MAAM,YAAY,GAAG;IACnB,KAAK,EAAE,KAAK;CACb,CAAA;AAED,yBACE,QAAyB,YAAY,EACrC,MAAc;IAGd,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACpB,oCAAoC;QACpC,KAAK,gCAAoB;YACvB,MAAM,mBACD,KAAK,IACR,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC,aAAa,EAC3C,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY,EACzC,eAAe,EAAE,MAAM,CAAC,OAAO,CAAC,eAAe,EAC/C,KAAK,EAAE,CAAC,EACR,MAAM,EAAE,IAAI,EACZ,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,IAClC;QACH,sCAAsC;QACtC,KAAK,iCAAqB;YACxB,MAAM,mBACD,KAAK,IACR,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,IACvB;QACH,6BAA6B;QAC7B,KAAK,4BAAgB;YACnB,MAAM,mBACD,KAAK,IACR,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,EACtB,MAAM,EAAE,KAAK,EACb,QAAQ,EAAE,CAAC,EAAE,CAAC,IACf;QACH,iDAAiD;QACjD,KAAK,6BAAiB;YACpB,MAAM,mBACD,KAAK,IACR,KAAK,EAAE,IAAI,IACZ;QACH,0BAA0B;QAC1B,KAAK,kCAAsB;YACzB,MAAM,mBACD,KAAK,IACR,YAAY,EAAE,CAAC,CAAC,EAChB,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,EACrB,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,IACxC;QACH;;WAEG;QACH,KAAK,+BAAmB;YACtB,MAAM,mBACD,KAAK,EACL,YAAY,EAChB;QACH;YACE,MAAM,CAAC,KAAK,CAAA;IAChB,CAAC;AACH,CAAC;AAxDD,0CAwDC","sourcesContent":["import {\n  CHOOSE_WORD_INIT_READY,\n  CHOOSE_WORD_READY,\n  CHOOSE_WORD_SET_INDEX,\n  CHOOSE_WORD_SET_NEXT,\n  CHOOSE_WORD_STOP,\n  CHOOSE_WORD_UNMOUNT,\n} from '../constants'\n\nconst initialState = {\n  ready: false,\n}\n\nexport function chooseWordStore(\n  state: ChooseWordStore = initialState,\n  action: Action,\n): ChooseWordStore {\n\n  switch (action.type) {\n    // setting the new question instance\n    case CHOOSE_WORD_SET_NEXT:\n      return {\n        ...state,\n        correctAnswer: action.payload.correctAnswer,\n        currentIndex: action.payload.currentIndex,\n        currentInstance: action.payload.currentInstance,\n        index: 0,\n        listen: true,\n        question: action.payload.question,\n      }\n    // go to the next word of the question\n    case CHOOSE_WORD_SET_INDEX:\n      return {\n        ...state,\n        index: state.index + 1,\n      }\n    // end of question is reached\n    case CHOOSE_WORD_STOP:\n      return {\n        ...state,\n        index: state.index + 1,\n        listen: false,\n        question: [[]],\n      }\n    // component is filled with all the required data\n    case CHOOSE_WORD_READY:\n      return {\n        ...state,\n        ready: true,\n      }\n    // initialization is ready\n    case CHOOSE_WORD_INIT_READY:\n      return {\n        ...state,\n        currentIndex: -1,\n        db: action.payload.db,\n        fillerWords: action.payload.fillerWords,\n      }\n    /**\n     * Clean-up the state\n     */\n    case CHOOSE_WORD_UNMOUNT:\n      return {\n        ...state,\n        ...initialState,\n      }\n    default:\n      return state\n  }\n}\n"]}]}