{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/guess_word/epics/nextEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/guess_word/epics/nextEpic.ts","mtime":1520625982115},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst string_fn_1 = require(\"string-fn\");\nconst getNextIndex_1 = require(\"../../_helpers/getNextIndex\");\nconst glueRelated_1 = require(\"../../_helpers/glueRelated\");\nconst constants_1 = require(\"../../constants\");\nconst actions_1 = require(\"../actions\");\nconst createWords = x => {\n    const [wordAnswer] = x.split(',');\n    const wordQuestion = string_fn_1.maskWords({\n        charLimit: 4,\n        words: wordAnswer,\n    });\n    return {\n        wordAnswer,\n        wordQuestion,\n        words: wordAnswer.split(' '),\n    };\n};\nfunction createInstance(store) {\n    const { fromLanguage, toLanguage } = store.getState().store;\n    const { db, currentIndex } = store.getState().guessWordStore;\n    const newIndex = getNextIndex_1.getNextIndex({ length: db.length, index: currentIndex });\n    const currentInstance = db[newIndex];\n    const relatedKey = `${fromLanguage.toLowerCase()}Related`;\n    const wordKey = `${fromLanguage.toLowerCase()}Word`;\n    const key = `${fromLanguage.toLowerCase()}Part`;\n    const translatedKey = `${toLanguage.toLowerCase()}Part`;\n    const related = glueRelated_1.glueRelated(currentInstance[relatedKey]);\n    const { wordAnswer, wordQuestion, words, } = createWords(currentInstance[wordKey]);\n    const sentence = currentInstance[key];\n    const translated = currentInstance[translatedKey];\n    const { hidden, visible } = string_fn_1.maskSentence({ sentence, words });\n    const question = visible.join(' ');\n    const answer = hidden.join(' ');\n    const normalizedCurrentInstance = {\n        fromPart: sentence,\n        toPart: '',\n        fromWord: '',\n        toWord: '',\n        imageSrc: currentInstance.imageSrc,\n    };\n    const payload = {\n        answer,\n        currentInstance: normalizedCurrentInstance,\n        currentIndex: newIndex,\n        question,\n        related,\n        translated,\n        wordAnswer,\n        wordQuestion,\n    };\n    return payload;\n}\nexports.nextEpic = (action$, store) => action$\n    .ofType(constants_1.GUESS_WORD_NEXT)\n    .map(() => actions_1.nextReady(createInstance(store)));\n",{"version":3,"file":"/home/just/repos/front/src/guess_word/epics/nextEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/guess_word/epics/nextEpic.ts"],"names":[],"mappings":";;AAEA,yCAAmD;AACnD,8DAA0D;AAC1D,4DAAwD;AACxD,+CAAiD;AACjD,wCAAsC;AAEtC,MAAM,WAAW,GAAG,CAAC,CAAC,EAAE;IACtB,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACjC,MAAM,YAAY,GAAG,qBAAS,CAAC;QAC7B,SAAS,EAAE,CAAC;QACZ,KAAK,EAAE,UAAU;KAClB,CAAC,CAAA;IAEF,MAAM,CAAC;QACL,UAAU;QACV,YAAY;QACZ,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;KAC7B,CAAA;AACH,CAAC,CAAA;AAED,wBAAwB,KAAsB;IAC5C,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAA;IAC3D,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAA;IAE5D,MAAM,QAAQ,GAAG,2BAAY,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAA;IACzE,MAAM,eAAe,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAA;IAEpC,MAAM,UAAU,GAAG,GAAG,YAAY,CAAC,WAAW,EAAE,SAAS,CAAA;IACzD,MAAM,OAAO,GAAG,GAAG,YAAY,CAAC,WAAW,EAAE,MAAM,CAAA;IACnD,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,WAAW,EAAE,MAAM,CAAA;IAC/C,MAAM,aAAa,GAAG,GAAG,UAAU,CAAC,WAAW,EAAE,MAAM,CAAA;IAEvD,MAAM,OAAO,GAAG,yBAAW,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAA;IACxD,MAAM,EACJ,UAAU,EACV,YAAY,EACZ,KAAK,GACN,GAAG,WAAW,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAA;IAEzC,MAAM,QAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,CAAA;IACrC,MAAM,UAAU,GAAG,eAAe,CAAC,aAAa,CAAC,CAAA;IAEjD,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,wBAAY,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAA;IAC7D,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAClC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAE/B,MAAM,yBAAyB,GAAgB;QAC7C,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,EAAE;QACV,QAAQ,EAAE,EAAE;QACZ,MAAM,EAAE,EAAE;QACV,QAAQ,EAAE,eAAe,CAAC,QAAkB;KAC7C,CAAA;IAED,MAAM,OAAO,GAAG;QACd,MAAM;QACN,eAAe,EAAE,yBAAyB;QAC1C,YAAY,EAAE,QAAQ;QACtB,QAAQ;QACR,OAAO;QACP,UAAU;QACV,UAAU;QACV,YAAY;KACb,CAAA;IAED,MAAM,CAAC,OAAO,CAAA;AAChB,CAAC;AAEY,QAAA,QAAQ,GAAG,CACtB,OAA+C,EAC/C,KAAsB,EACF,EAAE,CACtB,OAAO;KACJ,MAAM,CAAC,2BAAe,CAAC;KACvB,GAAG,CAAC,GAAG,EAAE,CAAC,mBAAS,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { maskSentence, maskWords } from 'string-fn'\nimport { getNextIndex } from '../../_helpers/getNextIndex'\nimport { glueRelated } from '../../_helpers/glueRelated'\nimport { GUESS_WORD_NEXT } from '../../constants'\nimport { nextReady } from '../actions'\n\nconst createWords = x => {\n  const [wordAnswer] = x.split(',')\n  const wordQuestion = maskWords({\n    charLimit: 4,\n    words: wordAnswer,\n  })\n\n  return {\n    wordAnswer,\n    wordQuestion,\n    words: wordAnswer.split(' '),\n  }\n}\n\nfunction createInstance(store: ObservableStore): any {\n  const { fromLanguage, toLanguage } = store.getState().store\n  const { db, currentIndex } = store.getState().guessWordStore\n\n  const newIndex = getNextIndex({ length: db.length, index: currentIndex })\n  const currentInstance = db[newIndex]\n\n  const relatedKey = `${fromLanguage.toLowerCase()}Related`\n  const wordKey = `${fromLanguage.toLowerCase()}Word`\n  const key = `${fromLanguage.toLowerCase()}Part`\n  const translatedKey = `${toLanguage.toLowerCase()}Part`\n\n  const related = glueRelated(currentInstance[relatedKey])\n  const {\n    wordAnswer,\n    wordQuestion,\n    words,\n  } = createWords(currentInstance[wordKey])\n\n  const sentence = currentInstance[key]\n  const translated = currentInstance[translatedKey]\n\n  const { hidden, visible } = maskSentence({ sentence, words })\n  const question = visible.join(' ')\n  const answer = hidden.join(' ')\n\n  const normalizedCurrentInstance: DataPattern = {\n    fromPart: sentence,\n    toPart: '',\n    fromWord: '',\n    toWord: '',\n    imageSrc: currentInstance.imageSrc as string,\n  }\n\n  const payload = {\n    answer,\n    currentInstance: normalizedCurrentInstance,\n    currentIndex: newIndex,\n    question,\n    related,\n    translated,\n    wordAnswer,\n    wordQuestion,\n  }\n\n  return payload\n}\n\nexport const nextEpic = (\n  action$: ActionsObservable<GuessWordNextAction>,\n  store: ObservableStore,\n): Observable<Action> =>\n  action$\n    .ofType(GUESS_WORD_NEXT)\n    .map(() => nextReady(createInstance(store)))\n"]}]}