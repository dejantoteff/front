{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/choose_word/component.tsx","dependencies":[{"path":"/home/just/repos/front/src/choose_word/component.tsx","mtime":1520601613728},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst react_redux_1 = require(\"react-redux\");\nconst actions_1 = require(\"./actions\");\nconst grid_1 = require(\"./styled/grid\");\nconst question_1 = require(\"./styled/question\");\n/**\n * User press one of arrow keys and thus selects one of three choices.\n * One of the choice is correct.\n * After every selection a new set of choices is generated.\n */\nclass ChooseWord extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClickUp = this.onClickUp.bind(this);\n        this.onClickRight = this.onClickRight.bind(this);\n        this.onClickDown = this.onClickDown.bind(this);\n        this.onClick = this.onClick.bind(this);\n    }\n    onClick(mode) {\n        this.props.dispatch(actions_1.click(mode));\n    }\n    onClickUp() {\n        this.onClick('UP');\n    }\n    onClickRight() {\n        this.onClick('RIGHT');\n    }\n    onClickDown() {\n        this.onClick('DOWN');\n    }\n    componentDidMount() {\n        this.props.dispatch(actions_1.init());\n    }\n    componentWillUnmount() {\n        this.props.dispatch(actions_1.unmount());\n    }\n    render() {\n        const { question, index } = this.props.chooseWordStore;\n        return (React.createElement(\"div\", null, this.props.chooseWordStore.ready &&\n            React.createElement(grid_1.Container, null,\n                React.createElement(question_1.QuestionContainer, null, this.props.chooseWordStore.listen && React.createElement(question_1.Question, null,\n                    React.createElement(question_1.ChoiceX, { onClick: this.onClickUp }, question[index][0]),\n                    React.createElement(question_1.ChoiceY, { onClick: this.onClickRight }, question[index][1]),\n                    React.createElement(question_1.ChoiceZ, { onClick: this.onClickDown }, question[index][2]))),\n                React.createElement(grid_1.Solved, null, this.props.chooseWordStore.correctAnswer.filter((_, i) => i < this.props.chooseWordStore.index).join(' ')),\n                React.createElement(grid_1.Translation, null, this.props.chooseWordStore.currentInstance.toPart))));\n    }\n}\nexports.ChooseWord = ChooseWord;\nconst connectComponent = ({ chooseWordStore }) => ({ chooseWordStore });\nexports.ChooseWordWrapped = react_redux_1.connect(connectComponent)(ChooseWord);\n",{"version":3,"file":"/home/just/repos/front/src/choose_word/component.tsx","sourceRoot":"","sources":["/home/just/repos/front/src/choose_word/component.tsx"],"names":[],"mappings":";;AAAA,+BAA8B;AAC9B,6CAAqC;AACrC,uCAAgD;AAEhD,wCAIsB;AAEtB,gDAM0B;AAE1B;;;;GAIG;AACH,gBAAwB,SAAQ,KAAK,CAAC,SAA8B;IAClE,YAAY,KAAsB;QAChC,KAAK,CAAC,KAAK,CAAC,CAAA;QACZ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC1C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACxC,CAAC;IACM,OAAO,CAAC,IAAY;QACzB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAK,CAAC,IAAI,CAAC,CAAC,CAAA;IAClC,CAAC;IACM,SAAS;QACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IACpB,CAAC;IACM,YAAY;QACjB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACvB,CAAC;IACM,WAAW;QAChB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;IACtB,CAAC;IACM,iBAAiB;QACtB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAI,EAAE,CAAC,CAAA;IAC7B,CAAC;IACM,oBAAoB;QACzB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,iBAAO,EAAE,CAAC,CAAA;IAChC,CAAC;IACM,MAAM;QACX,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAA;QAEtD,MAAM,CAAC,CACL,iCACG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK;YAC/B,oBAAC,gBAAS;gBAER,oBAAC,4BAAiB,QAEf,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,IAAI,oBAAC,mBAAQ;oBAE7C,oBAAC,kBAAO,IAAC,OAAO,EAAE,IAAI,CAAC,SAAS,IAC7B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACX;oBAEV,oBAAC,kBAAO,IAAC,OAAO,EAAE,IAAI,CAAC,YAAY,IAChC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACX;oBAEV,oBAAC,kBAAO,IAAC,OAAO,EAAE,IAAI,CAAC,WAAW,IAC/B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACX,CAED,CAEO;gBAEpB,oBAAC,aAAM,QAEH,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM,CAC7C,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,CAC/C,CAAC,IAAI,CAAC,GAAG,CAAC,CAEN;gBAET,oBAAC,kBAAW,QACT,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,MAAM,CACtC,CAEJ,CACV,CACP,CAAA;IACH,CAAC;CACF;AAtED,gCAsEC;AAED,MAAM,gBAAgB,GAAG,CAAC,EAAE,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,eAAe,EAAE,CAAC,CAAA;AAE1D,QAAA,iBAAiB,GAAG,qBAAO,CAAC,gBAAgB,CAAC,CAAC,UAAU,CAAC,CAAA","sourcesContent":["import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { click, init, unmount } from './actions'\n\nimport {\n  Container,\n  Solved,\n  Translation,\n} from './styled/grid'\n\nimport {\n  ChoiceX,\n  ChoiceY,\n  ChoiceZ,\n  Question,\n  QuestionContainer,\n} from './styled/question'\n\n/**\n * User press one of arrow keys and thus selects one of three choices.\n * One of the choice is correct.\n * After every selection a new set of choices is generated.\n */\nexport class ChooseWord extends React.Component<ChooseWordProps, {}> {\n  constructor(props: ChooseWordProps) {\n    super(props)\n    this.onClickUp = this.onClickUp.bind(this)\n    this.onClickRight = this.onClickRight.bind(this)\n    this.onClickDown = this.onClickDown.bind(this)\n    this.onClick = this.onClick.bind(this)\n  }\n  public onClick(mode: string) {\n    this.props.dispatch(click(mode))\n  }\n  public onClickUp() {\n    this.onClick('UP')\n  }\n  public onClickRight() {\n    this.onClick('RIGHT')\n  }\n  public onClickDown() {\n    this.onClick('DOWN')\n  }\n  public componentDidMount() {\n    this.props.dispatch(init())\n  }\n  public componentWillUnmount() {\n    this.props.dispatch(unmount())\n  }\n  public render() {\n    const { question, index } = this.props.chooseWordStore\n\n    return (\n      <div>\n        {this.props.chooseWordStore.ready &&\n          <Container>\n\n            <QuestionContainer>\n\n              {this.props.chooseWordStore.listen && <Question>\n\n                <ChoiceX onClick={this.onClickUp}>\n                  {question[index][0]}\n                </ChoiceX>\n\n                <ChoiceY onClick={this.onClickRight}>\n                  {question[index][1]}\n                </ChoiceY>\n\n                <ChoiceZ onClick={this.onClickDown}>\n                  {question[index][2]}\n                </ChoiceZ>\n\n              </Question>}\n\n            </QuestionContainer>\n\n            <Solved>\n              {\n                this.props.chooseWordStore.correctAnswer.filter(\n                  (_, i) => i < this.props.chooseWordStore.index,\n                ).join(' ')\n              }\n            </Solved>\n\n            <Translation>\n              {this.props.chooseWordStore.currentInstance.toPart}\n            </Translation>\n\n          </Container>}\n      </div>\n    )\n  }\n}\n\nconst connectComponent = ({ chooseWordStore }) => ({ chooseWordStore })\n\nexport const ChooseWordWrapped = connect(connectComponent)(ChooseWord)\n"]}]}