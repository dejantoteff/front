{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/root/epics/sharedChangeSettingsEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/root/epics/sharedChangeSettingsEpic.ts","mtime":1519499675289},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../../constants\");\nconst Observable_1 = require(\"rxjs/Observable\");\nconst string_fn_1 = require(\"string-fn\");\nconst common_1 = require(\"../../common\");\nconst getNewDoc = (doc, action) => {\n    if (action.type === constants_1.SETTINGS_RANDOM) {\n        return Object.assign({}, doc, { randomFlag: !doc.randomFlag });\n    }\n    else if (action.type === constants_1.SETTINGS_TEXT_TO_SPEECH) {\n        return Object.assign({}, doc, { textToSpeechFlag: !doc.textToSpeechFlag });\n    }\n};\nexports.sharedChangeSettingsEpic = (action$, store) => action$.ofType(constants_1.SETTINGS_RANDOM, constants_1.SETTINGS_TEXT_TO_SPEECH)\n    .switchMap(action => {\n    return new Observable_1.Observable(observer => {\n        const { name } = common_1.getCommons(store);\n        const resetAction = {\n            type: `${string_fn_1.camelCase(name)}@INIT`,\n        };\n        const { userDBCloud } = store.getState().store;\n        if (userDBCloud === undefined) {\n            observer.next(resetAction);\n            return observer.complete();\n        }\n        userDBCloud.get('data').then((doc) => {\n            const updatedDoc = getNewDoc(doc, action);\n            userDBCloud.put(updatedDoc).then(() => {\n                observer.next(resetAction);\n                observer.complete();\n            });\n        });\n    });\n})\n    .debounceTime(constants_1.LONG_DELAY);\n",{"version":3,"file":"/home/just/repos/front/src/root/epics/sharedChangeSettingsEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/root/epics/sharedChangeSettingsEpic.ts"],"names":[],"mappings":";;AAAA,+CAIwB;AAGxB,gDAA4C;AAC5C,yCAAqC;AACrC,yCAAyC;AAEzC,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;IAChC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,2BAAe,CAAC,CAAC,CAAC;QAEpC,MAAM,mBAAM,GAAG,IAAE,UAAU,EAAE,CAAC,GAAG,CAAC,UAAU,IAAE;IAChD,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,mCAAuB,CAAC,CAAC,CAAC;QAEnD,MAAM,mBAAM,GAAG,IAAE,gBAAgB,EAAE,CAAC,GAAG,CAAC,gBAAgB,IAAE;IAC5D,CAAC;AACH,CAAC,CAAA;AAEY,QAAA,wBAAwB,GAAG,CACtC,OAAsD,EACtD,KAAsB,EACL,EAAE,CAEnB,OAAO,CAAC,MAAM,CAAC,2BAAe,EAAE,mCAAuB,CAAC;KACrD,SAAS,CAAC,MAAM,CAAC,EAAE;IAElB,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG,mBAAU,CAAC,KAAK,CAAC,CAAA;QAClC,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,GAAG,qBAAS,CAAC,IAAI,CAAC,OAAO;SAChC,CAAA;QAED,MAAM,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAA;QAE9C,EAAE,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAE1B,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;QAC5B,CAAC;QAED,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;YACxC,MAAM,UAAU,GAAG,SAAS,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;YAEzC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBACpC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;gBAC1B,QAAQ,CAAC,QAAQ,EAAE,CAAA;YACrB,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC;KACD,YAAY,CAAC,sBAAU,CAAC,CAAA","sourcesContent":["import {\n  LONG_DELAY,\n  SETTINGS_RANDOM,\n  SETTINGS_TEXT_TO_SPEECH,\n} from '../../constants'\n\nimport { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { camelCase } from 'string-fn'\nimport { getCommons } from '../../common'\n\nconst getNewDoc = (doc, action) => {\n  if (action.type === SETTINGS_RANDOM) {\n\n    return { ...doc, randomFlag: !doc.randomFlag }\n  } else if (action.type === SETTINGS_TEXT_TO_SPEECH) {\n\n    return { ...doc, textToSpeechFlag: !doc.textToSpeechFlag }\n  }\n}\n\nexport const sharedChangeSettingsEpic = (\n  action$: ActionsObservable<SharedChangeSettingsAction>,\n  store: ObservableStore,\n): Observable<any> =>\n\n  action$.ofType(SETTINGS_RANDOM, SETTINGS_TEXT_TO_SPEECH)\n    .switchMap(action => {\n\n      return new Observable(observer => {\n        const { name } = getCommons(store)\n        const resetAction = {\n          type: `${camelCase(name)}@INIT`,\n        }\n\n        const { userDBCloud } = store.getState().store\n\n        if (userDBCloud === undefined) {\n          observer.next(resetAction)\n\n          return observer.complete()\n        }\n\n        userDBCloud.get('data').then((doc: any) => {\n          const updatedDoc = getNewDoc(doc, action)\n\n          userDBCloud.put(updatedDoc).then(() => {\n            observer.next(resetAction)\n            observer.complete()\n          })\n        })\n      })\n    })\n    .debounceTime(LONG_DELAY)\n"]}]}