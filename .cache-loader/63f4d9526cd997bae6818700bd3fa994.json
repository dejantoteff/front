{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/choose_word/epics/checkEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/choose_word/epics/checkEpic.ts","mtime":1517245825107},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst common_1 = require(\"../../common\");\nconst constants_1 = require(\"../../constants\");\nconst actions_1 = require(\"../actions\");\n/**\n * It returns the index of the selected word.\n *\n * @param {Action} action\n * @returns {number}\n */\nconst getIndexFromAction = (action) => {\n    /* tslint:disable:no-magic-numbers */\n    return action.payload === 'UP' ?\n        0 :\n        action.payload === 'DOWN' ?\n            2 :\n            1;\n    /* tslint:enable:no-magic-numbers */\n};\n/**\n * It is called upon each user selection.\n * It checks if the selection is correct or wrong.\n *\n * @param {ActionsObservable<ChooseWordCheckAction>} action$\n * @param {ObservableStore} store\n * @returns {Observable<any>}\n */\nexports.checkEpic = (action$, store) => action$.ofType(constants_1.CHOOSE_WORD_CHECK)\n    .switchMap(action => {\n    return new Observable_1.Observable(observer => {\n        const answerIndex = getIndexFromAction(action);\n        const { correctAnswer, index, question, } = store.getState().chooseWordStore;\n        const correct = correctAnswer[index];\n        const answer = question[index][answerIndex];\n        if (correct === answer) {\n            observer.next(common_1.sharedAddPoints(1));\n        }\n        observer.next(actions_1.step());\n        observer.complete();\n    });\n});\n",{"version":3,"file":"/home/just/repos/front/src/choose_word/epics/checkEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/choose_word/epics/checkEpic.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,yCAA8C;AAC9C,+CAAmD;AACnD,wCAAiC;AAEjC;;;;;GAKG;AACH,MAAM,kBAAkB,GAAG,CAAC,MAAc,EAAU,EAAE;IACpD,qCAAqC;IACrC,MAAM,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,CAAC,CAAA;IACL,oCAAoC;AACtC,CAAC,CAAA;AAED;;;;;;;GAOG;AACU,QAAA,SAAS,GAAG,CACvB,OAAiD,EACjD,KAAsB,EACL,EAAE,CACnB,OAAO,CAAC,MAAM,CAAC,6BAAiB,CAAC;KAC9B,SAAS,CAAC,MAAM,CAAC,EAAE;IAClB,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAC/B,MAAM,WAAW,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAA;QAE9C,MAAM,EACJ,aAAa,EACb,KAAK,EACL,QAAQ,GACT,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAA;QAEpC,MAAM,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC,CAAA;QACpC,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAA;QAE3C,EAAE,CAAC,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC;YACvB,QAAQ,CAAC,IAAI,CAAC,wBAAe,CAAC,CAAC,CAAC,CAAC,CAAA;QACnC,CAAC;QAED,QAAQ,CAAC,IAAI,CAAC,cAAI,EAAE,CAAC,CAAA;QACrB,QAAQ,CAAC,QAAQ,EAAE,CAAA;IACrB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { sharedAddPoints } from '../../common'\nimport { CHOOSE_WORD_CHECK } from '../../constants'\nimport { step } from '../actions'\n\n/**\n * It returns the index of the selected word.\n *\n * @param {Action} action\n * @returns {number}\n */\nconst getIndexFromAction = (action: Action): number => {\n  /* tslint:disable:no-magic-numbers */\n  return action.payload === 'UP' ?\n    0 :\n    action.payload === 'DOWN' ?\n      2 :\n      1\n  /* tslint:enable:no-magic-numbers */\n}\n\n/**\n * It is called upon each user selection.\n * It checks if the selection is correct or wrong.\n *\n * @param {ActionsObservable<ChooseWordCheckAction>} action$\n * @param {ObservableStore} store\n * @returns {Observable<any>}\n */\nexport const checkEpic = (\n  action$: ActionsObservable<ChooseWordCheckAction>,\n  store: ObservableStore,\n): Observable<any> =>\n  action$.ofType(CHOOSE_WORD_CHECK)\n    .switchMap(action => {\n      return new Observable(observer => {\n        const answerIndex = getIndexFromAction(action)\n\n        const {\n          correctAnswer,\n          index,\n          question,\n        } = store.getState().chooseWordStore\n\n        const correct = correctAnswer[index]\n        const answer = question[index][answerIndex]\n\n        if (correct === answer) {\n          observer.next(sharedAddPoints(1))\n        }\n\n        observer.next(step())\n        observer.complete()\n      })\n    })\n"]}]}