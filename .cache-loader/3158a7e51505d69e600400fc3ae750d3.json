{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/node_modules/notify/epic.ts","dependencies":[{"path":"/home/just/repos/front/node_modules/notify/epic.ts","mtime":1520676122893},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"./constants\");\nconst rambdax_1 = require(\"rambdax\");\nconst Observable_1 = require(\"rxjs/Observable\");\nexports.notifyEpic = (action$, store) => action$\n    .ofType(constants_1.NOTIFY_SUCCESS, constants_1.NOTIFY_ERROR, constants_1.NOTIFY_INFO, constants_1.NOTIFY_WARNING)\n    .filter(() => store.getState().notifyStore.status === constants_1.HIDDEN)\n    .switchMap(action => {\n    return new Observable_1.Observable(observer => {\n        observer.next({ type: constants_1.IN });\n        rambdax_1.delay(store.getState().notifyStore.ms)\n            .then(() => {\n            observer.next({ type: constants_1.OUT });\n            observer.complete();\n        })\n            .catch(console.error);\n    });\n});\n",{"version":3,"file":"/home/just/repos/front/node_modules/notify/epic.ts","sourceRoot":"","sources":["/home/just/repos/front/node_modules/notify/epic.ts"],"names":[],"mappings":";;AAAA,2CAQoB;AAEpB,qCAA+B;AAE/B,gDAA4C;AAE/B,QAAA,UAAU,GAAG,CACxB,OAAO,EACP,KAAK,EACL,EAAE,CACF,OAAO;KACJ,MAAM,CAAC,0BAAc,EAAE,wBAAY,EAAE,uBAAW,EAAE,0BAAc,CAAC;KACjE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,MAAM,KAAK,kBAAM,CAAC;KAC5D,SAAS,CAAC,MAAM,CAAC,EAAE;IAElB,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAE/B,QAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,cAAE,EAAC,CAAC,CAAA;QAEzB,eAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC;aACnC,IAAI,CAAC,GAAG,EAAE;YACT,QAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,eAAG,EAAC,CAAC,CAAA;YAC1B,QAAQ,CAAC,QAAQ,EAAE,CAAA;QACrB,CAAC,CAAC;aACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAEzB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {\n  HIDDEN,\n  IN,\n  NOTIFY_ERROR,\n  NOTIFY_INFO,\n  NOTIFY_SUCCESS,\n  NOTIFY_WARNING,\n  OUT,\n} from './constants'\n\nimport { delay } from 'rambdax'\n\nimport { Observable } from 'rxjs/Observable'\n\nexport const notifyEpic = (\n  action$,\n  store,\n) =>\n  action$\n    .ofType(NOTIFY_SUCCESS, NOTIFY_ERROR, NOTIFY_INFO, NOTIFY_WARNING)\n    .filter(() => store.getState().notifyStore.status === HIDDEN)\n    .switchMap(action => {\n\n      return new Observable(observer => {\n\n        observer.next({type: IN})\n\n        delay(store.getState().notifyStore.ms)\n          .then(() => {\n            observer.next({type: OUT})\n            observer.complete()\n          })\n          .catch(console.error)\n\n      })\n    })\n"]}]}