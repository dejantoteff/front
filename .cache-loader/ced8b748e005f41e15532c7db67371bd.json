{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/write_sentence/epics/nextEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/write_sentence/epics/nextEpic.ts","mtime":1519390903907},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rambdax_1 = require(\"rambdax\");\nconst Observable_1 = require(\"rxjs/Observable\");\nconst string_fn_1 = require(\"string-fn\");\nconst common_1 = require(\"../../common\");\nconst constants_1 = require(\"../../constants\");\nexports.nextEpic = (action$, store) => action$.ofType(constants_1.WRITE_SENTENCE_NEXT)\n    .concatMap(action => {\n    return new Observable_1.Observable(observer => {\n        const { currentIndex: currentIndexRaw, db, ready, } = store.getState().writeSentenceStore;\n        const { textToSpeechFlag } = common_1.getCommons(store);\n        const currentIndex = common_1.getNextIndex({\n            index: currentIndexRaw,\n            length: db.length,\n        });\n        const currentInstance = db[currentIndex];\n        const maskSentenceResult = string_fn_1.maskSentence({\n            charLimit: 4,\n            sentence: currentInstance.fromPart,\n            words: [],\n        });\n        const question = maskSentenceResult.visible\n            .map((visibleInstance, i) => ({\n            hidden: maskSentenceResult.hidden[i],\n            visible: visibleInstance,\n        }));\n        const payload = {\n            currentIndex,\n            currentInstance,\n            question,\n        };\n        observer.next({ type: constants_1.WRITE_SENTENCE_SET_NEXT, payload });\n        const ms = ready ?\n            constants_1.NEXT_TICK :\n            constants_1.SHORT_DELAY;\n        rambdax_1.delay(ms).then(() => {\n            observer.next({ type: constants_1.WRITE_SENTENCE_READY });\n            if (textToSpeechFlag) {\n                observer.next({ type: constants_1.SHARED_SPEAK, payload: 'toPart' });\n            }\n            observer.complete();\n        });\n    });\n});\n",{"version":3,"file":"/home/just/repos/front/src/write_sentence/epics/nextEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/write_sentence/epics/nextEpic.ts"],"names":[],"mappings":";;AAAA,qCAA+B;AAE/B,gDAA4C;AAC5C,yCAA4D;AAC5D,yCAAuD;AACvD,+CAOwB;AAEX,QAAA,QAAQ,GAAG,CACtB,OAAmD,EACnD,KAAsB,EACL,EAAE,CAEnB,OAAO,CAAC,MAAM,CAAC,+BAAmB,CAAC;KAChC,SAAS,CAAC,MAAM,CAAC,EAAE;IAClB,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAE/B,MAAM,EACJ,YAAY,EAAE,eAAe,EAC7B,EAAE,EACF,KAAK,GACN,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAA;QAEvC,MAAM,EAAE,gBAAgB,EAAE,GAAG,mBAAU,CAAC,KAAK,CAAC,CAAA;QAE9C,MAAM,YAAY,GAAG,qBAAY,CAAC;YAChC,KAAK,EAAE,eAAe;YACtB,MAAM,EAAE,EAAE,CAAC,MAAM;SAClB,CAAC,CAAA;QAEF,MAAM,eAAe,GAAG,EAAE,CAAC,YAAY,CAAC,CAAA;QAExC,MAAM,kBAAkB,GAAuB,wBAAY,CAAC;YAC1D,SAAS,EAAE,CAAC;YACZ,QAAQ,EAAE,eAAe,CAAC,QAAQ;YAClC,KAAK,EAAE,EAAE;SACV,CAAC,CAAA;QAEF,MAAM,QAAQ,GAAG,kBAAkB,CAAC,OAAO;aACxC,GAAG,CAAC,CAAC,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5B,MAAM,EAAE,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACpC,OAAO,EAAE,eAAe;SACzB,CAAC,CAAC,CAAA;QAEL,MAAM,OAAO,GAAG;YACd,YAAY;YACZ,eAAe;YACf,QAAQ;SACT,CAAA;QAED,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,mCAAuB,EAAE,OAAO,EAAE,CAAC,CAAA;QAEzD,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;YAChB,qBAAS,CAAC,CAAC;YACX,uBAAW,CAAA;QAEb,eAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAClB,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,gCAAoB,EAAE,CAAC,CAAA;YAE7C,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAErB,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,wBAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAA;YAE1D,CAAC;YAED,QAAQ,CAAC,QAAQ,EAAE,CAAA;QACrB,CAAC,CAAC,CAAA;IAEJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { delay } from 'rambdax'\nimport { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { maskSentence, OutputMaskSentence } from 'string-fn'\nimport { getCommons, getNextIndex } from '../../common'\nimport {\n  NEXT_TICK,\n  SHARED_SPEAK,\n  SHORT_DELAY,\n  WRITE_SENTENCE_NEXT,\n  WRITE_SENTENCE_READY,\n  WRITE_SENTENCE_SET_NEXT,\n} from '../../constants'\n\nexport const nextEpic = (\n  action$: ActionsObservable<WriteSentenceNextAction>,\n  store: ObservableStore,\n): Observable<any> =>\n\n  action$.ofType(WRITE_SENTENCE_NEXT)\n    .concatMap(action => {\n      return new Observable(observer => {\n\n        const {\n          currentIndex: currentIndexRaw,\n          db,\n          ready,\n        } = store.getState().writeSentenceStore\n\n        const { textToSpeechFlag } = getCommons(store)\n\n        const currentIndex = getNextIndex({\n          index: currentIndexRaw,\n          length: db.length,\n        })\n\n        const currentInstance = db[currentIndex]\n\n        const maskSentenceResult: OutputMaskSentence = maskSentence({\n          charLimit: 4,\n          sentence: currentInstance.fromPart,\n          words: [],\n        })\n\n        const question = maskSentenceResult.visible\n          .map((visibleInstance, i) => ({\n            hidden: maskSentenceResult.hidden[i],\n            visible: visibleInstance,\n          }))\n\n        const payload = {\n          currentIndex,\n          currentInstance,\n          question,\n        }\n\n        observer.next({ type: WRITE_SENTENCE_SET_NEXT, payload })\n\n        const ms = ready ?\n          NEXT_TICK :\n          SHORT_DELAY\n\n        delay(ms).then(() => {\n          observer.next({ type: WRITE_SENTENCE_READY })\n\n          if (textToSpeechFlag) {\n\n            observer.next({ type: SHARED_SPEAK, payload: 'toPart' })\n\n          }\n\n          observer.complete()\n        })\n\n      })\n    })\n"]}]}