{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/write_sentence/epics/checkEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/write_sentence/epics/checkEpic.ts","mtime":1517225634816},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst string_fn_1 = require(\"string-fn\");\nconst common_1 = require(\"../../common\");\nconst constants_1 = require(\"../../constants\");\nconst actions_1 = require(\"../actions\");\n/**\n * Perform database filtering(in neccessary) before emitting `ready` and `next` actions\n *\n * @param {any} observer\n */\nexports.checkEpic = (action$, store) => action$.ofType(constants_1.WRITE_SENTENCE_CHECK)\n    .switchMap(action => {\n    return new Observable_1.Observable(observer => {\n        const { fromLanguage } = common_1.getCommons(store);\n        const { inputState, question, index, } = store.getState().writeSentenceStore;\n        const distanceMethod = fromLanguage === 'DE' ?\n            string_fn_1.distanceGerman :\n            string_fn_1.distance;\n        const distanceValue = distanceMethod(inputState.trim(), question[index].hidden);\n        if (distanceValue <= 1) {\n            observer.next(common_1.sharedAddPoints(1));\n        }\n        observer.next(actions_1.step());\n        observer.complete();\n    });\n});\n",{"version":3,"file":"/home/just/repos/front/src/write_sentence/epics/checkEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/write_sentence/epics/checkEpic.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,yCAAoD;AACpD,yCAA0D;AAC1D,+CAAsD;AACtD,wCAAiC;AAEjC;;;;GAIG;AACU,QAAA,SAAS,GAAG,CACvB,OAAoD,EACpD,KAAsB,EACL,EAAE,CAEnB,OAAO,CAAC,MAAM,CAAC,gCAAoB,CAAC;KACjC,SAAS,CAAC,MAAM,CAAC,EAAE;IAElB,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAC/B,MAAM,EAAE,YAAY,EAAE,GAAG,mBAAU,CAAC,KAAK,CAAC,CAAA;QAE1C,MAAM,EACJ,UAAU,EACV,QAAQ,EACR,KAAK,GACN,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAA;QAEvC,MAAM,cAAc,GAAG,YAAY,KAAK,IAAI,CAAC,CAAC;YAC5C,0BAAc,CAAC,CAAC;YAChB,oBAAQ,CAAA;QAEV,MAAM,aAAa,GAAG,cAAc,CAClC,UAAU,CAAC,IAAI,EAAE,EACjB,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CACvB,CAAA;QAED,EAAE,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC;YAEvB,QAAQ,CAAC,IAAI,CAAC,wBAAe,CAAC,CAAC,CAAC,CAAC,CAAA;QAEnC,CAAC;QACD,QAAQ,CAAC,IAAI,CAAC,cAAI,EAAE,CAAC,CAAA;QAErB,QAAQ,CAAC,QAAQ,EAAE,CAAA;IACrB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { distance, distanceGerman } from 'string-fn'\nimport { getCommons, sharedAddPoints } from '../../common'\nimport { WRITE_SENTENCE_CHECK } from '../../constants'\nimport { step } from '../actions'\n\n/**\n * Perform database filtering(in neccessary) before emitting `ready` and `next` actions\n *\n * @param {any} observer\n */\nexport const checkEpic = (\n  action$: ActionsObservable<WriteSentenceCheckAction>,\n  store: ObservableStore,\n): Observable<any> =>\n\n  action$.ofType(WRITE_SENTENCE_CHECK)\n    .switchMap(action => {\n\n      return new Observable(observer => {\n        const { fromLanguage } = getCommons(store)\n\n        const {\n          inputState,\n          question,\n          index,\n        } = store.getState().writeSentenceStore\n\n        const distanceMethod = fromLanguage === 'DE' ?\n          distanceGerman :\n          distance\n\n        const distanceValue = distanceMethod(\n          inputState.trim(),\n          question[index].hidden,\n        )\n\n        if (distanceValue <= 1) {\n\n          observer.next(sharedAddPoints(1))\n\n        }\n        observer.next(step())\n\n        observer.complete()\n      })\n    })\n"]}]}