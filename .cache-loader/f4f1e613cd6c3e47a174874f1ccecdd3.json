{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/user/epics/loginEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/user/epics/loginEpic.ts","mtime":1519579874315},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rambdax_1 = require(\"rambdax\");\nconst Observable_1 = require(\"rxjs/Observable\");\nconst string_fn_1 = require(\"string-fn\");\nconst common_1 = require(\"../../common\");\nconst constants_1 = require(\"../../constants\");\nconst saveCredentials_1 = require(\"../_helpers/saveCredentials\");\nexports.loginEpic = (action$, store, { postRequest, getPouchDB }) => action$\n    .ofType(constants_1.USER_LOGIN)\n    .switchMap(action => new Observable_1.Observable(observer => {\n    const PouchDB = getPouchDB();\n    const userDBName = string_fn_1.snakeCase(action.payload.email);\n    const url = `${process.env.COUCH_URL}/${userDBName}`;\n    const userDBCloud = new PouchDB(url, { skip_setup: true });\n    userDBCloud\n        .login(userDBName, action.payload.password)\n        .then(({ ok }) => {\n        if (!ok) {\n            observer.next(common_1.failLoginNotify());\n            return observer.complete();\n        }\n        saveCredentials_1.saveCredentials(userDBName, action.payload.password);\n        observer.next(common_1.successLoginNotify());\n        userDBCloud.get('data').then(doc => {\n            const actionToDispatch = {\n                payload: {\n                    data: rambdax_1.omit('_id,_rev', doc),\n                    userDBCloud: userDBCloud,\n                },\n                type: constants_1.POUCH_USER_READY,\n            };\n            observer.next(actionToDispatch);\n        });\n    })\n        .catch(err => {\n        console.warn(err);\n        observer.complete();\n    });\n}));\n",{"version":3,"file":"/home/just/repos/front/src/user/epics/loginEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/user/epics/loginEpic.ts"],"names":[],"mappings":";;AAAA,qCAA8B;AAE9B,gDAA4C;AAC5C,yCAAqC;AACrC,yCAAkE;AAClE,+CAA8D;AAC9D,iEAA6D;AAEhD,QAAA,SAAS,GAAG,CACvB,OAA2C,EAC3C,KAAsB,EACtB,EAAE,WAAW,EAAE,UAAU,EAAE,EACV,EAAE,CACnB,OAAO;KACJ,MAAM,CAAC,sBAAU,CAAC;KAClB,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;IAC7C,MAAM,OAAO,GAAG,UAAU,EAAE,CAAA;IAC5B,MAAM,UAAU,GAAG,qBAAS,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAClD,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,UAAU,EAAE,CAAA;IAEpD,MAAM,WAAW,GAAQ,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;IAE/D,WAAW;SACR,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC1C,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;QAEf,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,QAAQ,CAAC,IAAI,CAAC,wBAAe,EAAE,CAAC,CAAA;YAEhC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;QAC5B,CAAC;QAED,iCAAe,CAAC,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QACpD,QAAQ,CAAC,IAAI,CAAC,2BAAkB,EAAE,CAAC,CAAA;QAEnC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAEjC,MAAM,gBAAgB,GAAyB;gBAC7C,OAAO,EAAE;oBACP,IAAI,EAAE,cAAI,CAAC,UAAU,EAAE,GAAG,CAAC;oBAC3B,WAAW,EAAE,WAAW;iBACzB;gBACD,IAAI,EAAE,4BAAgB;aACvB,CAAA;YACD,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;IAEJ,CAAC,CAAC;SACD,KAAK,CAAC,GAAG,CAAC,EAAE;QACX,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACjB,QAAQ,CAAC,QAAQ,EAAE,CAAA;IACrB,CAAC,CAAC,CAAA;AAEN,CAAC,CAAC,CACH,CAAA","sourcesContent":["import { omit } from 'rambdax'\nimport { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { snakeCase } from 'string-fn'\nimport { failLoginNotify, successLoginNotify } from '../../common'\nimport { POUCH_USER_READY, USER_LOGIN } from '../../constants'\nimport { saveCredentials } from '../_helpers/saveCredentials'\n\nexport const loginEpic = (\n  action$: ActionsObservable<UserLoginAction>,\n  store: ObservableStore,\n  { postRequest, getPouchDB },\n): Observable<any> =>\n  action$\n    .ofType(USER_LOGIN)\n    .switchMap(action => new Observable(observer => {\n      const PouchDB = getPouchDB()\n      const userDBName = snakeCase(action.payload.email)\n      const url = `${process.env.COUCH_URL}/${userDBName}`\n\n      const userDBCloud: any = new PouchDB(url, { skip_setup: true })\n\n      userDBCloud\n        .login(userDBName, action.payload.password)\n        .then(({ ok }) => {\n\n          if (!ok) {\n            observer.next(failLoginNotify())\n\n            return observer.complete()\n          }\n\n          saveCredentials(userDBName, action.payload.password)\n          observer.next(successLoginNotify())\n\n          userDBCloud.get('data').then(doc => {\n\n            const actionToDispatch: PouchUserReadyAction = {\n              payload: {\n                data: omit('_id,_rev', doc),\n                userDBCloud: userDBCloud,\n              },\n              type: POUCH_USER_READY,\n            }\n            observer.next(actionToDispatch)\n          })\n\n        })\n        .catch(err => {\n          console.warn(err)\n          observer.complete()\n        })\n\n    }),\n  )\n"]}]}