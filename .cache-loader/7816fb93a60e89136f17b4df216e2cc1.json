{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/user/epics/registerEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/user/epics/registerEpic.ts","mtime":1517477827979},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst constants_1 = require(\"../../constants\");\nexports.registerEpic = (action$, store, { postRequest }) => action$\n    .ofType(constants_1.USER_REGISTER)\n    .switchMap(action => new Observable_1.Observable(observer => {\n    const url = `${process.env.NGROK_URL}/user-register`;\n    const notifyAction = {\n        payload: { message: `Sent validation email to ${action.payload.email}` },\n        type: 'notify@INFO',\n    };\n    const result$ = postRequest(url, action.payload);\n    result$.subscribe(result => {\n        observer.next(notifyAction);\n        observer.complete();\n    });\n}));\n",{"version":3,"file":"/home/just/repos/front/src/user/epics/registerEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/user/epics/registerEpic.ts"],"names":[],"mappings":";;AAEA,gDAA4C;AAC5C,+CAA+C;AAElC,QAAA,YAAY,GAAG,CAC1B,OAA8C,EAC9C,KAAsB,EACtB,EAAE,WAAW,EAAE,EACE,EAAE,CACnB,OAAO;KACJ,MAAM,CAAC,yBAAa,CAAC;KACrB,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;IAC7C,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,gBAAgB,CAAA;IAEpD,MAAM,YAAY,GAAgB;QAChC,OAAO,EAAE,EAAE,OAAO,EAAE,4BAA4B,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE;QACxE,IAAI,EAAE,aAAa;KACpB,CAAA;IAED,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;IAEhD,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;QACzB,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;QAC3B,QAAQ,CAAC,QAAQ,EAAE,CAAA;IACrB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CACH,CAAA","sourcesContent":["import { NotifyInput } from 'notify'\nimport { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { USER_REGISTER } from '../../constants'\n\nexport const registerEpic = (\n  action$: ActionsObservable<UserRegisterAction>,\n  store: ObservableStore,\n  { postRequest },\n): Observable<any> =>\n  action$\n    .ofType(USER_REGISTER)\n    .switchMap(action => new Observable(observer => {\n      const url = `${process.env.NGROK_URL}/user-register`\n\n      const notifyAction: NotifyInput = {\n        payload: { message: `Sent validation email to ${action.payload.email}` },\n        type: 'notify@INFO',\n      }\n\n      const result$ = postRequest(url, action.payload)\n\n      result$.subscribe(result => {\n        observer.next(notifyAction)\n        observer.complete()\n      })\n    }),\n  )\n"]}]}