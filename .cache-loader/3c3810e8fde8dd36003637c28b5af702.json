{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/_modules/speak.ts","dependencies":[{"path":"/home/just/repos/front/src/_modules/speak.ts","mtime":1519311067794},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rambdax_1 = require(\"rambdax\");\nconst VOLUME = 0.53;\nconst synth = window.speechSynthesis;\nconst utterThis = new SpeechSynthesisUtterance();\nfunction getOptions(input) {\n    return rambdax_1.switcher(input.language)\n        .is('EN', { lang: 'en-US', rate: 1 })\n        .is('DE', { lang: 'de-DE', rate: 0.88 })\n        .default(false);\n}\nfunction speak(input) {\n    return new Promise(resolve => {\n        const options = getOptions(input);\n        if (options === false) {\n            return resolve();\n        }\n        utterThis.text = input.text;\n        utterThis.volume = VOLUME;\n        utterThis.lang = options.lang;\n        utterThis.rate = options.rate;\n        synth.speak(utterThis);\n        utterThis.onend = () => {\n            resolve();\n        };\n    });\n}\nexports.speak = speak;\n",{"version":3,"file":"/home/just/repos/front/src/_modules/speak.ts","sourceRoot":"","sources":["/home/just/repos/front/src/_modules/speak.ts"],"names":[],"mappings":";;AAAA,qCAAkC;AAUlC,MAAM,MAAM,GAAG,IAAI,CAAA;AAEnB,MAAM,KAAK,GAAG,MAAM,CAAC,eAAe,CAAA;AAEpC,MAAM,SAAS,GAAG,IAAI,wBAAwB,EAAE,CAAA;AAEhD,oBAAoB,KAAY;IAC9B,MAAM,CAAC,kBAAQ,CAAkB,KAAK,CAAC,QAAQ,CAAC;SAC7C,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;SACpC,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;SACvC,OAAO,CAAC,KAAK,CAAC,CAAA;AACnB,CAAC;AAED,eAAsB,KAAY;IAChC,MAAM,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;QAC3B,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,CAAA;QACjC,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC;YAEtB,MAAM,CAAC,OAAO,EAAE,CAAA;QAClB,CAAC;QACD,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAA;QAC3B,SAAS,CAAC,MAAM,GAAG,MAAM,CAAA;QACzB,SAAS,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QAC7B,SAAS,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QAC7B,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;QACtB,SAAS,CAAC,KAAK,GAAG,GAAG,EAAE;YACrB,OAAO,EAAE,CAAA;QACX,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;AACJ,CAAC;AAhBD,sBAgBC","sourcesContent":["import { switcher } from 'rambdax'\ninterface Speak {\n  text: string\n  language: Language\n}\ninterface Options {\n  lang: string\n  rate: number\n}\n\nconst VOLUME = 0.53\n\nconst synth = window.speechSynthesis\n\nconst utterThis = new SpeechSynthesisUtterance()\n\nfunction getOptions(input: Speak) {\n  return switcher<false | Options>(input.language)\n    .is('EN', { lang: 'en-US', rate: 1 })\n    .is('DE', { lang: 'de-DE', rate: 0.88 })\n    .default(false)\n}\n\nexport function speak(input: Speak): Promise<void> {\n  return new Promise(resolve => {\n    const options = getOptions(input)\n    if (options === false) {\n\n      return resolve()\n    }\n    utterThis.text = input.text\n    utterThis.volume = VOLUME\n    utterThis.lang = options.lang\n    utterThis.rate = options.rate\n    synth.speak(utterThis)\n    utterThis.onend = () => {\n      resolve()\n    }\n  })\n}\n"]}]}