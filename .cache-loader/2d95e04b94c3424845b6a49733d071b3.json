{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/learning_meme/reducers.ts","dependencies":[{"path":"/home/just/repos/front/src/learning_meme/reducers.ts","mtime":1519157712168},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../constants\");\nconst initialState = {\n    ready: false,\n};\nfunction learningMemeStore(state = initialState, action) {\n    switch (action.type) {\n        case constants_1.LEARNING_MEME_INIT_READY:\n            return Object.assign({}, state, { currentIndex: -1, db: action.payload });\n        case constants_1.LEARNING_MEME_READY:\n            return Object.assign({}, state, { ready: true });\n        case constants_1.LEARNING_MEME_STOP:\n            return Object.assign({}, state, { listen: false });\n        case constants_1.LEARNING_MEME_SET_INPUT:\n            return Object.assign({}, state, { inputState: action.payload });\n        case constants_1.LEARNING_MEME_SET_NEXT:\n            return Object.assign({}, state, { currentIndex: action.payload.currentIndex, currentInstance: action.payload.currentInstance, inputState: '', listen: true, question: action.payload.question, sentence: action.payload.sentence });\n        /**\n         * Clean-up the state\n         */\n        case constants_1.LEARNING_MEME_UNMOUNT:\n            return Object.assign({}, state, initialState);\n        default:\n            return state;\n    }\n}\nexports.learningMemeStore = learningMemeStore;\n",{"version":3,"file":"/home/just/repos/front/src/learning_meme/reducers.ts","sourceRoot":"","sources":["/home/just/repos/front/src/learning_meme/reducers.ts"],"names":[],"mappings":";;AAAA,4CAOqB;AAErB,MAAM,YAAY,GAAG;IACnB,KAAK,EAAE,KAAK;CACb,CAAA;AAED,2BACE,QAA2B,YAAY,EACvC,MAAc;IAGd,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACpB,KAAK,oCAAwB;YAC3B,MAAM,mBACD,KAAK,IACR,YAAY,EAAE,CAAC,CAAC,EAChB,EAAE,EAAE,MAAM,CAAC,OAAO,IACnB;QACH,KAAK,+BAAmB;YACtB,MAAM,mBACD,KAAK,IACR,KAAK,EAAE,IAAI,IACZ;QACH,KAAK,8BAAkB;YACrB,MAAM,mBACD,KAAK,IACR,MAAM,EAAE,KAAK,IACd;QACH,KAAK,mCAAuB;YAC1B,MAAM,mBACD,KAAK,IACR,UAAU,EAAE,MAAM,CAAC,OAAO,IAC3B;QACH,KAAK,kCAAsB;YACzB,MAAM,mBACD,KAAK,IACR,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY,EACzC,eAAe,EAAE,MAAM,CAAC,OAAO,CAAC,eAAe,EAC/C,UAAU,EAAE,EAAE,EACd,MAAM,EAAE,IAAI,EACZ,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,EACjC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,IAClC;QACH;;WAEG;QACH,KAAK,iCAAqB;YACxB,MAAM,mBACD,KAAK,EACL,YAAY,EAChB;QACH;YACE,MAAM,CAAC,KAAK,CAAA;IAChB,CAAC;AACH,CAAC;AAhDD,8CAgDC","sourcesContent":["import {\n  LEARNING_MEME_INIT_READY,\n  LEARNING_MEME_READY,\n  LEARNING_MEME_SET_INPUT,\n  LEARNING_MEME_SET_NEXT,\n  LEARNING_MEME_STOP,\n  LEARNING_MEME_UNMOUNT,\n} from '../constants'\n\nconst initialState = {\n  ready: false,\n}\n\nexport function learningMemeStore(\n  state: LearningMemeStore = initialState,\n  action: Action,\n): LearningMemeStore {\n\n  switch (action.type) {\n    case LEARNING_MEME_INIT_READY:\n      return {\n        ...state,\n        currentIndex: -1,\n        db: action.payload,\n      }\n    case LEARNING_MEME_READY:\n      return {\n        ...state,\n        ready: true,\n      }\n    case LEARNING_MEME_STOP:\n      return {\n        ...state,\n        listen: false,\n      }\n    case LEARNING_MEME_SET_INPUT:\n      return {\n        ...state,\n        inputState: action.payload,\n      }\n    case LEARNING_MEME_SET_NEXT:\n      return {\n        ...state,\n        currentIndex: action.payload.currentIndex,\n        currentInstance: action.payload.currentInstance,\n        inputState: '',\n        listen: true,\n        question: action.payload.question,\n        sentence: action.payload.sentence,\n      }\n    /**\n     * Clean-up the state\n     */\n    case LEARNING_MEME_UNMOUNT:\n      return {\n        ...state,\n        ...initialState,\n      }\n    default:\n      return state\n  }\n}\n"]}]}