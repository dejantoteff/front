{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/root/epics/initEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/root/epics/initEpic.ts","mtime":1520585345033},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst constants_1 = require(\"./../../constants\");\nconst actions_1 = require(\"./../actions\");\n/**\n * Intializing database and evemtually user's data\n */\nexports.initEpic = (action$, store, { getJSON, getUserData, getPouchDB, }) => action$\n    .ofType(constants_1.INIT)\n    .switchMap(() => new Observable_1.Observable(observer => {\n    const stream$ = Observable_1.Observable.forkJoin(getJSON(constants_1.DB_URL), getUserData(getPouchDB));\n    stream$.subscribe(([received, userData]) => {\n        observer.next(actions_1.initReady({ received, userData }));\n        observer.complete();\n    });\n}));\n",{"version":3,"file":"/home/just/repos/front/src/root/epics/initEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/root/epics/initEpic.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,iDAAgD;AAChD,0CAAwC;AAExC;;GAEG;AACU,QAAA,QAAQ,GAAG,CACtB,OAAsC,EACtC,KAAsB,EACtB,EACE,OAAO,EACP,WAAW,EACX,UAAU,GACX,EACgB,EAAE,CAEnB,OAAO;KACJ,MAAM,CAAC,gBAAI,CAAC;KACZ,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;IACzC,MAAM,OAAO,GAAG,uBAAU,CAAC,QAAQ,CACjC,OAAO,CAAC,kBAAM,CAAC,EAAE,WAAW,CAAC,UAAU,CAAC,CACzC,CAAA;IAED,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,EAAE;QACzC,QAAQ,CAAC,IAAI,CAAC,mBAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAA;QAChD,QAAQ,CAAC,QAAQ,EAAE,CAAA;IACrB,CAAC,CAAC,CAAA;AAEJ,CAAC,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { DB_URL, INIT } from './../../constants'\nimport { initReady } from './../actions'\n\n/**\n * Intializing database and evemtually user's data\n */\nexport const initEpic = (\n  action$: ActionsObservable<InitAction>,\n  store: ObservableStore,\n  {\n    getJSON,\n    getUserData,\n    getPouchDB,\n  },\n): Observable<any> =>\n\n  action$\n    .ofType(INIT)\n    .switchMap(() => new Observable(observer => {\n      const stream$ = Observable.forkJoin(\n        getJSON(DB_URL), getUserData(getPouchDB),\n      )\n\n      stream$.subscribe(([received, userData]) => {\n        observer.next(initReady({ received, userData }))\n        observer.complete()\n      })\n\n    }))\n"]}]}