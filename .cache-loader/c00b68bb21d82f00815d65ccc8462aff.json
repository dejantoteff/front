{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/learning_meme/component.tsx","dependencies":[{"path":"/home/just/repos/front/src/learning_meme/component.tsx","mtime":1520604036972},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst react_redux_1 = require(\"react-redux\");\nconst actions_1 = require(\"./actions\");\nconst grid_1 = require(\"./styled/grid\");\nconst image_1 = require(\"./styled/image\");\nconst input_1 = require(\"./styled/input\");\nconst question_1 = require(\"./styled/question\");\nconst sentence_1 = require(\"./styled/sentence\");\nconst translation_1 = require(\"./styled/translation\");\nclass LearningMeme extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.onInput = this.onInput.bind(this);\n    }\n    onInput(event) {\n        if (event.key === 'Enter') {\n            this.props.dispatch(actions_1.listen('ENTER'));\n        }\n        else {\n            this.props.dispatch(actions_1.listen(event.target.value));\n        }\n    }\n    componentDidMount() {\n        this.props.dispatch(actions_1.init());\n    }\n    componentWillUnmount() {\n        this.props.dispatch(actions_1.unmount());\n    }\n    render() {\n        return (React.createElement(\"div\", null, this.props.learningMemeStore.ready &&\n            React.createElement(grid_1.Container, null,\n                React.createElement(input_1.InputContainer, null,\n                    React.createElement(input_1.Input, null,\n                        React.createElement(\"input\", { type: 'text', autoFocus: this.props.learningMemeStore.ready, value: this.props.learningMemeStore.inputState, onChange: this.onInput, onKeyPress: this.onInput }))),\n                React.createElement(question_1.QuestionContainer, null,\n                    React.createElement(question_1.Question, null,\n                        this.props.learningMemeStore.listen &&\n                            React.createElement(\"div\", null,\n                                React.createElement(\"span\", { className: 'fromWord' }, this.props.learningMemeStore.question),\n                                React.createElement(\"span\", { className: 'toWord' }, this.props.learningMemeStore.currentInstance.toWord)),\n                        !this.props.learningMemeStore.listen &&\n                            React.createElement(\"div\", null,\n                                React.createElement(\"span\", { className: 'fromWord' }, this.props.learningMemeStore.currentInstance.fromWord),\n                                React.createElement(\"span\", { className: 'toWord' }, this.props.learningMemeStore.currentInstance.toWord)))),\n                React.createElement(sentence_1.SentenceContainer, null,\n                    React.createElement(sentence_1.Sentence, null,\n                        !this.props.learningMemeStore.listen &&\n                            React.createElement(\"span\", null, this.props.learningMemeStore.sentence.hidden),\n                        this.props.learningMemeStore.listen &&\n                            React.createElement(\"span\", null, this.props.learningMemeStore.sentence.visible))),\n                React.createElement(image_1.ImageContainer, null,\n                    React.createElement(image_1.Image, { src: this.props.learningMemeStore.currentInstance.imageSrc })),\n                React.createElement(translation_1.TranslationContainer, null,\n                    React.createElement(translation_1.Translation, null, this.props.learningMemeStore.currentInstance.toPart)))));\n    }\n}\nexports.LearningMeme = LearningMeme;\nconst connectComponent = ({ learningMemeStore }) => ({ learningMemeStore });\nexports.LearningMemeWrapped = react_redux_1.connect(connectComponent)(LearningMeme);\n",{"version":3,"file":"/home/just/repos/front/src/learning_meme/component.tsx","sourceRoot":"","sources":["/home/just/repos/front/src/learning_meme/component.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { init, listen, unmount } from './actions'\nimport { Container } from './styled/grid'\nimport { Image, ImageContainer } from './styled/image'\nimport { Input, InputContainer } from './styled/input'\nimport { Question, QuestionContainer } from './styled/question'\nimport { Sentence, SentenceContainer } from './styled/sentence'\nimport { Translation, TranslationContainer } from './styled/translation'\n\nexport class LearningMeme extends React.PureComponent<LearningMemeProps, {}> {\n  constructor(props: LearningMemeProps) {\n    super(props)\n    this.onInput = this.onInput.bind(this)\n  }\n  public onInput(event: any) {\n    if (event.key === 'Enter') {\n      this.props.dispatch(listen('ENTER'))\n    } else {\n      this.props.dispatch(listen(event.target.value))\n    }\n  }\n  public componentDidMount() {\n    this.props.dispatch(init())\n  }\n  public componentWillUnmount() {\n    this.props.dispatch(unmount())\n  }\n  public render() {\n    return (\n\n      <div>\n        {this.props.learningMemeStore.ready &&\n          <Container>\n\n            <InputContainer>\n              <Input>\n                <input\n                  type='text'\n                  autoFocus={this.props.learningMemeStore.ready}\n                  value={this.props.learningMemeStore.inputState}\n                  onChange={this.onInput}\n                  onKeyPress={this.onInput}\n                />\n              </Input>\n            </InputContainer>\n\n            <QuestionContainer>\n              <Question>\n\n                {this.props.learningMemeStore.listen &&\n                  <div>\n\n                    <span className='fromWord'>\n                      {this.props.learningMemeStore.question}\n                    </span>\n\n                    <span className='toWord'>\n                      {this.props.learningMemeStore.currentInstance.toWord}\n                    </span>\n\n                  </div>\n                }\n\n                {!this.props.learningMemeStore.listen &&\n                  <div>\n\n                    <span className='fromWord'>\n                      {this.props.learningMemeStore.currentInstance.fromWord}\n                    </span>\n\n                    <span className='toWord'>\n                      {this.props.learningMemeStore.currentInstance.toWord}</span>\n                  </div>\n                }\n\n              </Question>\n            </QuestionContainer>\n\n            <SentenceContainer>\n              <Sentence>\n\n                {\n                  !this.props.learningMemeStore.listen &&\n                  <span>\n                    {this.props.learningMemeStore.sentence.hidden}\n                  </span>\n                }\n\n                {\n                  this.props.learningMemeStore.listen &&\n                  <span>\n                    {this.props.learningMemeStore.sentence.visible}\n                  </span>\n                }\n\n              </Sentence>\n            </SentenceContainer>\n\n            <ImageContainer>\n              <Image\n                src={this.props.learningMemeStore.currentInstance.imageSrc}\n              />\n            </ImageContainer>\n\n            <TranslationContainer>\n              <Translation>\n                {this.props.learningMemeStore.currentInstance.toPart}\n              </Translation>\n            </TranslationContainer>\n\n          </Container>\n        }\n      </div>\n    )\n  }\n}\n\nconst connectComponent = ({ learningMemeStore }) => ({ learningMemeStore })\n\nexport const LearningMemeWrapped = connect(connectComponent)(LearningMeme)\n"]}]}