{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/choose_word/epics/stepEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/choose_word/epics/stepEpic.ts","mtime":1517270440090},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst common_1 = require(\"../../common\");\nconst constants_1 = require(\"../../constants\");\nconst actions_1 = require(\"../actions\");\n/**\n * It increments the local counter so\n * we can proceed to the next set of choices.\n *\n * @param {ActionsObservable<ChooseWordStepAction>} action$\n * @param {ObservableStore} store\n * @returns {Observable<any>}\n */\nexports.stepEpic = (action$, store) => action$.ofType(constants_1.CHOOSE_WORD_STEP)\n    .switchMap(action => {\n    return new Observable_1.Observable(observer => {\n        const { index, correctAnswer, } = store.getState().chooseWordStore;\n        if (index + 1 === correctAnswer.length) {\n            const { textToSpeechFlag } = common_1.getCommons(store);\n            observer.next(actions_1.stop());\n            if (textToSpeechFlag) {\n                observer.next({ type: constants_1.SHARED_SPEAK, payload: 'fromPart' });\n            }\n        }\n        else {\n            observer.next(actions_1.setIndex());\n        }\n        observer.complete();\n    });\n});\n",{"version":3,"file":"/home/just/repos/front/src/choose_word/epics/stepEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/choose_word/epics/stepEpic.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,yCAAyC;AACzC,+CAAgE;AAChE,wCAA2C;AAE3C;;;;;;;GAOG;AACU,QAAA,QAAQ,GAAG,CACtB,OAAgD,EAChD,KAAsB,EACL,EAAE,CACnB,OAAO,CAAC,MAAM,CAAC,4BAAgB,CAAC;KAC7B,SAAS,CAAC,MAAM,CAAC,EAAE;IAClB,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAE/B,MAAM,EACJ,KAAK,EACL,aAAa,GACd,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAA;QAEpC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;YACvC,MAAM,EAAE,gBAAgB,EAAE,GAAG,mBAAU,CAAC,KAAK,CAAC,CAAA;YAE9C,QAAQ,CAAC,IAAI,CAAC,cAAI,EAAE,CAAC,CAAA;YAErB,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACrB,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,wBAAY,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAA;YAC5D,CAAC;QAEH,CAAC;QAAC,IAAI,CAAC,CAAC;YAEN,QAAQ,CAAC,IAAI,CAAC,kBAAQ,EAAE,CAAC,CAAA;QAC3B,CAAC;QAED,QAAQ,CAAC,QAAQ,EAAE,CAAA;IACrB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { getCommons } from '../../common'\nimport { CHOOSE_WORD_STEP, SHARED_SPEAK } from '../../constants'\nimport { setIndex, stop } from '../actions'\n\n/**\n * It increments the local counter so\n * we can proceed to the next set of choices.\n *\n * @param {ActionsObservable<ChooseWordStepAction>} action$\n * @param {ObservableStore} store\n * @returns {Observable<any>}\n */\nexport const stepEpic = (\n  action$: ActionsObservable<ChooseWordStepAction>,\n  store: ObservableStore,\n): Observable<any> =>\n  action$.ofType(CHOOSE_WORD_STEP)\n    .switchMap(action => {\n      return new Observable(observer => {\n\n        const {\n          index,\n          correctAnswer,\n        } = store.getState().chooseWordStore\n\n        if (index + 1 === correctAnswer.length) {\n          const { textToSpeechFlag } = getCommons(store)\n\n          observer.next(stop())\n\n          if (textToSpeechFlag) {\n            observer.next({ type: SHARED_SPEAK, payload: 'fromPart' })\n          }\n\n        } else {\n\n          observer.next(setIndex())\n        }\n\n        observer.complete()\n      })\n    })\n"]}]}