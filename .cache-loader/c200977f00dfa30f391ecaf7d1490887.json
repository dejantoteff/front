{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/guess_word/epics/inputEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/guess_word/epics/inputEpic.ts","mtime":1520618479435},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../../constants\");\nconst actions_1 = require(\"../actions\");\nfunction isListen(store) {\n    return store.getState().guessWordStore.listen;\n}\nexports.inputEpic = (action$, store) => action$\n    .ofType(constants_1.GUESS_WORD_INPUT)\n    .filter(() => isListen(store))\n    .map(action => actions_1.inputChange(action.payload));\n",{"version":3,"file":"/home/just/repos/front/src/guess_word/epics/inputEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/guess_word/epics/inputEpic.ts"],"names":[],"mappings":";;AAEA,+CAAkD;AAClD,wCAAwC;AAExC,kBAAkB,KAAsB;IAEtC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,MAAM,CAAA;AAC/C,CAAC;AAEY,QAAA,SAAS,GAAG,CACvB,OAAgD,EAChD,KAAsB,EACF,EAAE,CACtB,OAAO;KACJ,MAAM,CAAC,4BAAgB,CAAC;KACxB,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KAC7B,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,qBAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { GUESS_WORD_INPUT } from '../../constants'\nimport { inputChange } from '../actions'\n\nfunction isListen(store: ObservableStore) {\n\n  return store.getState().guessWordStore.listen\n}\n\nexport const inputEpic = (\n  action$: ActionsObservable<GuessWordInputAction>,\n  store: ObservableStore,\n): Observable<Action> =>\n  action$\n    .ofType(GUESS_WORD_INPUT)\n    .filter(() => isListen(store))\n    .map(action => inputChange(action.payload))\n"]}]}