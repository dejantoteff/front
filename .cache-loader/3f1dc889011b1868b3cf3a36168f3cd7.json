{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/choose_word/epics/initEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/choose_word/epics/initEpic.ts","mtime":1520447433434},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../../constants\");\nconst rambdax_1 = require(\"rambdax\");\nconst Observable_1 = require(\"rxjs/Observable\");\nconst getDB_1 = require(\"../../_modules/getDB\");\nconst common_1 = require(\"../../common\");\nconst generateFillerWords_1 = require(\"../_helpers/generateFillerWords\");\n/**\n * It is called after the database is set and the component is mounted.\n *\n * @param {ActionsObservable<ChooseWordInitAction>} action$\n * @param {ObservableStore} store\n * @returns {Observable<any>}\n */\nexports.initEpic = (action$, store) => {\n    const db$ = action$.ofType(constants_1.INIT_READY);\n    const init$ = action$.ofType(constants_1.CHOOSE_WORD_INIT);\n    const willListen = Observable_1.Observable.combineLatest(db$, init$);\n    return willListen.switchMap(action => {\n        return new Observable_1.Observable(observer => {\n            observer.next(common_1.sharedInit(constants_1.CHOOSE_WORD));\n            const { randomFlag, fromLanguage, toLanguage } = common_1.getCommons(store);\n            const { db } = store.getState().store;\n            const dbValue = getDB_1.getDB({ db, fromLanguage, toLanguage });\n            const fn = randomFlag ?\n                rambdax_1.shuffle :\n                rambdax_1.identity;\n            const fillerWords = generateFillerWords_1.generateFillerWords(dbValue);\n            observer.next({\n                payload: {\n                    db: fn(dbValue),\n                    fillerWords: fillerWords,\n                },\n                type: constants_1.CHOOSE_WORD_INIT_READY,\n            });\n            observer.complete();\n        });\n    });\n};\n",{"version":3,"file":"/home/just/repos/front/src/choose_word/epics/initEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/choose_word/epics/initEpic.ts"],"names":[],"mappings":";;AAAA,+CAKwB;AAExB,qCAA2C;AAE3C,gDAA4C;AAC5C,gDAA4C;AAC5C,yCAAqD;AACrD,yEAAqE;AAErE;;;;;;GAMG;AACU,QAAA,QAAQ,GAAG,CACtB,OAAgD,EAChD,KAAsB,EACL,EAAE;IACnB,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,sBAAU,CAAC,CAAA;IACtC,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,4BAAgB,CAAC,CAAA;IAE9C,MAAM,UAAU,GAAG,uBAAU,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IAEvD,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;QAEnC,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;YAC/B,QAAQ,CAAC,IAAI,CAAC,mBAAU,CAAC,uBAAW,CAAC,CAAC,CAAA;YAEtC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,mBAAU,CAAC,KAAK,CAAC,CAAA;YAElE,MAAM,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAA;YAErC,MAAM,OAAO,GAAG,aAAK,CAAC,EAAE,EAAE,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,CAAA;YAEvD,MAAM,EAAE,GAAG,UAAU,CAAC,CAAC;gBACrB,iBAAO,CAAC,CAAC;gBACT,kBAAQ,CAAA;YAEV,MAAM,WAAW,GAAG,yCAAmB,CAAC,OAAO,CAAC,CAAA;YAEhD,QAAQ,CAAC,IAAI,CAAC;gBACZ,OAAO,EAAE;oBACP,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC;oBACf,WAAW,EAAE,WAAW;iBACzB;gBACD,IAAI,EAAE,kCAAsB;aAC7B,CAAC,CAAA;YAEF,QAAQ,CAAC,QAAQ,EAAE,CAAA;QACrB,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA","sourcesContent":["import {\n  CHOOSE_WORD,\n  CHOOSE_WORD_INIT,\n  CHOOSE_WORD_INIT_READY,\n  INIT_READY,\n} from '../../constants'\n\nimport { identity, shuffle } from 'rambdax'\nimport { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { getDB } from '../../_modules/getDB'\nimport { getCommons, sharedInit } from '../../common'\nimport { generateFillerWords } from '../_helpers/generateFillerWords'\n\n/**\n * It is called after the database is set and the component is mounted.\n *\n * @param {ActionsObservable<ChooseWordInitAction>} action$\n * @param {ObservableStore} store\n * @returns {Observable<any>}\n */\nexport const initEpic = (\n  action$: ActionsObservable<ChooseWordInitAction>,\n  store: ObservableStore,\n): Observable<any> => {\n  const db$ = action$.ofType(INIT_READY)\n  const init$ = action$.ofType(CHOOSE_WORD_INIT)\n\n  const willListen = Observable.combineLatest(db$, init$)\n\n  return willListen.switchMap(action => {\n\n    return new Observable(observer => {\n      observer.next(sharedInit(CHOOSE_WORD))\n\n      const { randomFlag, fromLanguage, toLanguage } = getCommons(store)\n\n      const { db } = store.getState().store\n\n      const dbValue = getDB({ db, fromLanguage, toLanguage })\n\n      const fn = randomFlag ?\n        shuffle :\n        identity\n\n      const fillerWords = generateFillerWords(dbValue)\n\n      observer.next({\n        payload: {\n          db: fn(dbValue),\n          fillerWords: fillerWords,\n        },\n        type: CHOOSE_WORD_INIT_READY,\n      })\n\n      observer.complete()\n    })\n  })\n}\n"]}]}