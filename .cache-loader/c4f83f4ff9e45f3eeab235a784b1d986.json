{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/guess_word/guessWord.tsx","dependencies":[{"path":"/home/just/repos/front/src/guess_word/guessWord.tsx","mtime":1520624021355},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst actions_1 = require(\"./actions\");\nconst colors_1 = require(\"colors\");\nconst grid_1 = require(\"./styled/grid\");\nconst image_1 = require(\"./styled/image\");\nconst input_1 = require(\"./styled/input\");\nconst related_1 = require(\"./styled/related\");\nconst word_1 = require(\"./styled/word\");\nconst TranslatedContainer = grid_1.CTextContainer('gw_translated');\nconst Translated = grid_1.CText({ color: colors_1.blue7 });\nconst SentenceContainer = grid_1.CTextContainer('gw_sentence');\nconst Sentence = grid_1.CText({ color: colors_1.darkblue7 });\nclass GuessWord extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onInput = this.onInput.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n    onInput(e) {\n        this.props.dispatch(actions_1.input(e.target.value));\n    }\n    onKeyPress(event) {\n        if (event.key === 'Enter') {\n            this.props.dispatch(actions_1.check());\n        }\n    }\n    render() {\n        const x = this.props.guessWordStore;\n        const imageSrc = x.currentInstance.imageSrc;\n        return (React.createElement(grid_1.Container, null,\n            React.createElement(input_1.InputContainer, null,\n                React.createElement(input_1.Input, null,\n                    React.createElement(\"input\", { type: 'text', autoFocus: true, value: x.inputState, onChange: this.onInput, onKeyPress: this.onKeyPress }))),\n            React.createElement(word_1.WordContainer, null,\n                x.listen && React.createElement(word_1.Word, null, x.wordQuestion),\n                !x.listen && React.createElement(word_1.Word, null, x.wordAnswer)),\n            React.createElement(related_1.RelatedContainer, null,\n                React.createElement(related_1.Related, null, x.related[0]),\n                React.createElement(related_1.Related, null, x.related[1])),\n            React.createElement(SentenceContainer, null,\n                x.listen && React.createElement(Sentence, null, x.question),\n                !x.listen && React.createElement(Sentence, null, x.answer)),\n            React.createElement(image_1.ImageContainer, null,\n                React.createElement(image_1.Image, { src: imageSrc })),\n            React.createElement(TranslatedContainer, null,\n                React.createElement(Translated, null, x.translated))));\n    }\n}\nexports.GuessWord = GuessWord;\n",{"version":3,"file":"/home/just/repos/front/src/guess_word/guessWord.tsx","sourceRoot":"","sources":["/home/just/repos/front/src/guess_word/guessWord.tsx"],"names":[],"mappings":";;AAAA,+BAA8B;AAC9B,uCAAwC;AAExC,mCAAyC;AAEzC,wCAAgE;AAChE,0CAAsD;AACtD,0CAAsD;AACtD,8CAA4D;AAC5D,wCAAmD;AAEnD,MAAM,mBAAmB,GAAG,qBAAc,CAAC,eAAe,CAAC,CAAA;AAC3D,MAAM,UAAU,GAAG,YAAK,CAAC,EAAE,KAAK,EAAE,cAAK,EAAE,CAAC,CAAA;AAC1C,MAAM,iBAAiB,GAAG,qBAAc,CAAC,aAAa,CAAC,CAAA;AACvD,MAAM,QAAQ,GAAG,YAAK,CAAC,EAAE,KAAK,EAAE,kBAAS,EAAE,CAAC,CAAA;AAE5C,eAAuB,SAAQ,KAAK,CAAC,SAA6B;IAChE,YAAY,KAAqB;QAC/B,KAAK,CAAC,KAAK,CAAC,CAAA;QACZ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC9C,CAAC;IACM,OAAO,CAAC,CAAC;QACd,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;IAC5C,CAAC;IACM,UAAU,CAAC,KAAU;QAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAK,EAAE,CAAC,CAAA;QAC9B,CAAC;IACH,CAAC;IACM,MAAM;QACX,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAA;QACnC,MAAM,QAAQ,GAAG,CAAC,CAAC,eAAe,CAAC,QAAkB,CAAA;QAErD,MAAM,CAAC,CACL,oBAAC,gBAAS;YACR,oBAAC,sBAAc;gBACb,oBAAC,aAAK;oBACJ,+BACE,IAAI,EAAC,MAAM,EACX,SAAS,EAAE,IAAI,EACf,KAAK,EAAE,CAAC,CAAC,UAAU,EACnB,QAAQ,EAAE,IAAI,CAAC,OAAO,EACtB,UAAU,EAAE,IAAI,CAAC,UAAU,GAC3B,CACI,CACO;YAEjB,oBAAC,oBAAa;gBACX,CAAC,CAAC,MAAM,IAAI,oBAAC,WAAI,QAAE,CAAC,CAAC,YAAY,CAAQ;gBACzC,CAAC,CAAC,CAAC,MAAM,IAAI,oBAAC,WAAI,QAAE,CAAC,CAAC,UAAU,CAAQ,CAC3B;YAEhB,oBAAC,0BAAgB;gBACf,oBAAC,iBAAO,QAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAW;gBACjC,oBAAC,iBAAO,QAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAW,CAChB;YAEnB,oBAAC,iBAAiB;gBACf,CAAC,CAAC,MAAM,IAAI,oBAAC,QAAQ,QAAE,CAAC,CAAC,QAAQ,CAAY;gBAC7C,CAAC,CAAC,CAAC,MAAM,IAAI,oBAAC,QAAQ,QAAE,CAAC,CAAC,MAAM,CAAY,CAC3B;YAEpB,oBAAC,sBAAc;gBACb,oBAAC,aAAK,IAAC,GAAG,EAAE,QAAQ,GAAI,CACT;YAEjB,oBAAC,mBAAmB;gBAClB,oBAAC,UAAU,QACR,CAAC,CAAC,UAAU,CACF,CACO,CACZ,CACb,CAAA;IACH,CAAC;CACF;AA3DD,8BA2DC","sourcesContent":["import * as React from 'react'\nimport { check, input } from './actions'\n\nimport { blue7, darkblue7 } from 'colors'\n\nimport { Container, CText, CTextContainer } from './styled/grid'\nimport { Image, ImageContainer } from './styled/image'\nimport { Input, InputContainer } from './styled/input'\nimport { Related, RelatedContainer } from './styled/related'\nimport { Word, WordContainer } from './styled/word'\n\nconst TranslatedContainer = CTextContainer('gw_translated')\nconst Translated = CText({ color: blue7 })\nconst SentenceContainer = CTextContainer('gw_sentence')\nconst Sentence = CText({ color: darkblue7 })\n\nexport class GuessWord extends React.Component<GuessWordProps, {}> {\n  constructor(props: GuessWordProps) {\n    super(props)\n    this.onInput = this.onInput.bind(this)\n    this.onKeyPress = this.onKeyPress.bind(this)\n  }\n  public onInput(e) {\n    this.props.dispatch(input(e.target.value))\n  }\n  public onKeyPress(event: any) {\n    if (event.key === 'Enter') {\n      this.props.dispatch(check())\n    }\n  }\n  public render() {\n    const x = this.props.guessWordStore\n    const imageSrc = x.currentInstance.imageSrc as string\n\n    return (\n      <Container>\n        <InputContainer>\n          <Input>\n            <input\n              type='text'\n              autoFocus={true}\n              value={x.inputState}\n              onChange={this.onInput}\n              onKeyPress={this.onKeyPress}\n            />\n          </Input>\n        </InputContainer>\n\n        <WordContainer>\n          {x.listen && <Word>{x.wordQuestion}</Word>}\n          {!x.listen && <Word>{x.wordAnswer}</Word>}\n        </WordContainer>\n\n        <RelatedContainer>\n          <Related>{x.related[0]}</Related>\n          <Related>{x.related[1]}</Related>\n        </RelatedContainer>\n\n        <SentenceContainer>\n          {x.listen && <Sentence>{x.question}</Sentence>}\n          {!x.listen && <Sentence>{x.answer}</Sentence>}\n        </SentenceContainer>\n\n        <ImageContainer>\n          <Image src={imageSrc} />\n        </ImageContainer>\n\n        <TranslatedContainer>\n          <Translated>\n            {x.translated}\n          </Translated>\n        </TranslatedContainer>\n      </Container>\n    )\n  }\n}\n"]}]}