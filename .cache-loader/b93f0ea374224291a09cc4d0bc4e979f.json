{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/guess_word/epics/checkEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/guess_word/epics/checkEpic.ts","mtime":1520626056283},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst string_fn_1 = require(\"string-fn\");\nconst selectors_1 = require(\"../../_modules/selectors\");\nconst constants_1 = require(\"../../constants\");\nconst actions_1 = require(\"../../root/actions\");\nconst actions_2 = require(\"../actions\");\nexports.checkEpic = (action$, store) => action$\n    .ofType(constants_1.GUESS_WORD_CHECK)\n    .switchMap(action => new Observable_1.Observable(observer => {\n    const { textToSpeechFlag, fromLanguage, } = selectors_1.getCommons(store);\n    const { wordAnswer, listen, inputState, } = store.getState().guessWordStore;\n    if (!listen) {\n        /**\n         * check is emitted from hitting Enter_\n         * so in this case it acts as next request\n         */\n        observer.next(actions_2.next());\n        return observer.complete();\n    }\n    const distanceMethod = fromLanguage === 'DE' ?\n        string_fn_1.distanceGerman :\n        string_fn_1.distance;\n    const distanceResult = distanceMethod(inputState.toLowerCase().trim(), wordAnswer.toLowerCase());\n    if (distanceResult <= 2) {\n        observer.next(actions_1.sharedAddPoints(1));\n    }\n    observer.next(actions_2.stop());\n    if (textToSpeechFlag) {\n        observer.next({ type: constants_1.SHARED_SPEAK, payload: 'fromPart' });\n    }\n    observer.complete();\n}));\n",{"version":3,"file":"/home/just/repos/front/src/guess_word/epics/checkEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/guess_word/epics/checkEpic.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,yCAAoD;AACpD,wDAAqD;AACrD,+CAAgE;AAChE,gDAAoD;AACpD,wCAAuC;AAE1B,QAAA,SAAS,GAAG,CACvB,OAAgD,EAChD,KAAsB,EACF,EAAE,CACtB,OAAO;KACJ,MAAM,CAAC,4BAAgB,CAAC;KACxB,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;IAC7C,MAAM,EACJ,gBAAgB,EAChB,YAAY,GACb,GAAG,sBAAU,CAAC,KAAK,CAAC,CAAA;IAErB,MAAM,EACJ,UAAU,EACV,MAAM,EACN,UAAU,GACX,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAA;IAEnC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACZ;;;WAGG;QACH,QAAQ,CAAC,IAAI,CAAC,cAAI,EAAE,CAAC,CAAA;QACrB,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;IAC5B,CAAC;IAED,MAAM,cAAc,GAAG,YAAY,KAAK,IAAI,CAAC,CAAC;QAC5C,0BAAc,CAAC,CAAC;QAChB,oBAAQ,CAAA;IAEV,MAAM,cAAc,GAAG,cAAc,CACnC,UAAU,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAC/B,UAAU,CAAC,WAAW,EAAE,CACzB,CAAA;IAED,EAAE,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,QAAQ,CAAC,IAAI,CAAC,yBAAe,CAAC,CAAC,CAAC,CAAC,CAAA;IACnC,CAAC;IAED,QAAQ,CAAC,IAAI,CAAC,cAAI,EAAE,CAAC,CAAA;IAErB,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrB,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,wBAAY,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAA;IAC5D,CAAC;IAED,QAAQ,CAAC,QAAQ,EAAE,CAAA;AACrB,CAAC,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { distance, distanceGerman } from 'string-fn'\nimport { getCommons } from '../../_modules/selectors'\nimport { GUESS_WORD_CHECK, SHARED_SPEAK } from '../../constants'\nimport { sharedAddPoints } from '../../root/actions'\nimport { next, stop } from '../actions'\n\nexport const checkEpic = (\n  action$: ActionsObservable<GuessWordCheckAction>,\n  store: ObservableStore,\n): Observable<Action> =>\n  action$\n    .ofType(GUESS_WORD_CHECK)\n    .switchMap(action => new Observable(observer => {\n      const {\n        textToSpeechFlag,\n        fromLanguage,\n      } = getCommons(store)\n\n      const {\n        wordAnswer,\n        listen,\n        inputState,\n      } = store.getState().guessWordStore\n\n      if (!listen) {\n        /**\n         * check is emitted from hitting Enter_\n         * so in this case it acts as next request\n         */\n        observer.next(next())\n        return observer.complete()\n      }\n\n      const distanceMethod = fromLanguage === 'DE' ?\n        distanceGerman :\n        distance\n\n      const distanceResult = distanceMethod(\n        inputState.toLowerCase().trim(),\n        wordAnswer.toLowerCase(),\n      )\n\n      if (distanceResult <= 2) {\n        observer.next(sharedAddPoints(1))\n      }\n\n      observer.next(stop())\n\n      if (textToSpeechFlag) {\n        observer.next({ type: SHARED_SPEAK, payload: 'fromPart' })\n      }\n\n      observer.complete()\n    }))\n"]}]}