{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/guess_word/epics/initEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/guess_word/epics/initEpic.ts","mtime":1520585549129},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst constants_1 = require(\"../../constants\");\nconst actions_1 = require(\"../actions\");\nfunction createDB(store) {\n    try {\n        const state = store.getState().store;\n        const { fromLanguage, toLanguage, db } = state;\n        const filterFn = (x => {\n            const fromKey = `${fromLanguage.toLowerCase()}Related`;\n            const toKey = `${toLanguage.toLowerCase()}Part`;\n            const hasFrom = x[fromKey] !== undefined && x[fromKey].length > 0;\n            const hasTo = x[toKey] !== undefined && x[toKey].length > 0;\n            return hasFrom && hasTo;\n        });\n        const newDB = db.filter(filterFn);\n        return actions_1.initReady(newDB);\n    }\n    catch (err) {\n        throw err;\n    }\n}\nexports.createDB = createDB;\nexports.initEpic = (action$, store) => {\n    const init$ = action$.ofType(constants_1.GUESS_WORD_INIT);\n    const root$ = action$.ofType(constants_1.INIT_READY);\n    return Observable_1.Observable.combineLatest(init$, root$)\n        .map(() => createDB(store));\n};\n",{"version":3,"file":"/home/just/repos/front/src/guess_word/epics/initEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/guess_word/epics/initEpic.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,+CAA6D;AAC7D,wCAAsC;AAEtC,kBAAyB,KAAsB;IAC7C,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAA;QACpC,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE,GAAG,KAAK,CAAA;QAE9C,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE;YACpB,MAAM,OAAO,GAAG,GAAG,YAAY,CAAC,WAAW,EAAE,SAAS,CAAA;YACtD,MAAM,KAAK,GAAG,GAAG,UAAU,CAAC,WAAW,EAAE,MAAM,CAAA;YAE/C,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;YACjE,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;YAE3D,MAAM,CAAC,OAAO,IAAI,KAAK,CAAA;QACzB,CAAC,CAAC,CAAA;QAEF,MAAM,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAEjC,MAAM,CAAC,mBAAS,CAAC,KAAK,CAAC,CAAA;IACzB,CAAC;IAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACb,MAAM,GAAG,CAAA;IACX,CAAC;AACH,CAAC;AArBD,4BAqBC;AAEY,QAAA,QAAQ,GAAG,CACtB,OAA+C,EAC/C,KAAsB,EACF,EAAE;IACtB,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,2BAAe,CAAC,CAAA;IAC7C,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,sBAAU,CAAC,CAAA;IAExC,MAAM,CAAC,uBAAU,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC;SAC1C,GAAG,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;AAC/B,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { GUESS_WORD_INIT, INIT_READY } from '../../constants'\nimport { initReady } from '../actions'\n\nexport function createDB(store: ObservableStore): Action {\n  try {\n    const state = store.getState().store\n    const { fromLanguage, toLanguage, db } = state\n\n    const filterFn = (x => {\n      const fromKey = `${fromLanguage.toLowerCase()}Related`\n      const toKey = `${toLanguage.toLowerCase()}Part`\n\n      const hasFrom = x[fromKey] !== undefined && x[fromKey].length > 0\n      const hasTo = x[toKey] !== undefined && x[toKey].length > 0\n\n      return hasFrom && hasTo\n    })\n\n    const newDB = db.filter(filterFn)\n\n    return initReady(newDB)\n  } catch (err) {\n    throw err\n  }\n}\n\nexport const initEpic = (\n  action$: ActionsObservable<GuessWordInitAction>,\n  store: ObservableStore,\n): Observable<Action> => {\n  const init$ = action$.ofType(GUESS_WORD_INIT)\n  const root$ = action$.ofType(INIT_READY)\n\n  return Observable.combineLatest(init$, root$)\n    .map(() => createDB(store))\n}\n"]}]}