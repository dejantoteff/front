{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/_helpers/glueRelated.ts","dependencies":[{"path":"/home/just/repos/front/src/_helpers/glueRelated.ts","mtime":1520626310167},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst rambdax_1 = require(\"rambdax\");\nconst sorter = (a, b) => b.length - a.length;\nconst LIMIT = 45;\nconst SEP = ' ; ';\nfunction getTotalLength(words) {\n    return words.reduce((prev, current) => prev + current.length, 0);\n}\nfunction getLine(word, list) {\n    let flag = true;\n    let counter = -1;\n    const answer = [word];\n    while (flag) {\n        counter++;\n        if (counter === list.length) {\n            flag = false;\n            continue;\n        }\n        const possibleAnswer = [...answer, list[counter]];\n        const len = getTotalLength(possibleAnswer);\n        const separatorLength = (possibleAnswer.length - 1) * SEP.length;\n        if (len + separatorLength < LIMIT) {\n            answer.push(list[counter]);\n        }\n    }\n    return answer;\n}\n/**\n * Converts list of words to two strings within LIMIT length\n */\nfunction glueRelated(words) {\n    const filtered = words.filter(x => x.length < LIMIT);\n    const sorted = rambdax_1.sort(sorter, filtered);\n    if (sorted.length === 0) {\n        return ['', ''];\n    }\n    if (sorted.length === 1) {\n        return [sorted[0], ''];\n    }\n    const firstLine = getLine(sorted[0], rambdax_1.tail(sorted));\n    const remain = sorted.filter(x => !firstLine.includes(x));\n    if (remain.join(SEP).length < LIMIT) {\n        return [\n            firstLine.join(SEP),\n            remain.join(SEP),\n        ];\n    }\n    const secondLine = getLine(remain[0], rambdax_1.tail(remain));\n    return [\n        firstLine.join(SEP),\n        secondLine.join(SEP),\n    ];\n}\nexports.glueRelated = glueRelated;\n",{"version":3,"file":"/home/just/repos/front/src/_helpers/glueRelated.ts","sourceRoot":"","sources":["/home/just/repos/front/src/_helpers/glueRelated.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { sort, tail } from 'rambdax'\n\nconst sorter = (a: string, b: string) => b.length - a.length\nconst LIMIT = 45\nconst SEP = ' ; '\n\nfunction getTotalLength(words: string[]): number {\n  return words.reduce(\n    (prev, current) => prev + current.length,\n    0,\n  )\n}\n\nfunction getLine(word: string, list: string[]): string[] {\n  let flag = true\n  let counter = -1\n  const answer = [word]\n\n  while (flag) {\n    counter++\n\n    if (counter === list.length) {\n      flag = false\n      continue\n    }\n    const possibleAnswer = [...answer, list[counter]]\n\n    const len = getTotalLength(possibleAnswer)\n    const separatorLength = (possibleAnswer.length - 1) * SEP.length\n    if (len + separatorLength < LIMIT) {\n      answer.push(list[counter])\n    }\n  }\n\n  return answer\n}\n\n/**\n * Converts list of words to two strings within LIMIT length\n */\nexport function glueRelated(words: string[]) {\n  const filtered = words.filter(\n    x => x.length < LIMIT,\n  )\n\n  const sorted = sort(sorter, filtered)\n\n  if (sorted.length === 0) {\n\n    return ['', '']\n  }\n\n  if (sorted.length === 1) {\n\n    return [sorted[0], '']\n  }\n\n  const firstLine = getLine(sorted[0], tail(sorted))\n  const remain = sorted.filter(\n    x => !firstLine.includes(x),\n  )\n\n  if (remain.join(SEP).length < LIMIT) {\n\n    return [\n      firstLine.join(SEP),\n      remain.join(SEP),\n    ]\n  }\n\n  const secondLine = getLine(remain[0], tail(remain))\n\n  return [\n    firstLine.join(SEP),\n    secondLine.join(SEP),\n  ]\n}\n"]}]}