{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/root/epics/sharedSpeakEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/root/epics/sharedSpeakEpic.ts","mtime":1520625693447},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst string_fn_1 = require(\"string-fn\");\nconst speak_1 = require(\"../../_modules/speak\");\nconst common_1 = require(\"../../common\");\nconst constants_1 = require(\"../../constants\");\nlet busy = false;\nexports.sharedSpeakEpic = (action$, store) => action$.ofType(constants_1.SHARED_SPEAK)\n    .switchMap(action => {\n    return new Observable_1.Observable(observer => {\n        if (busy) {\n            return observer.complete();\n        }\n        busy = true;\n        const { fromLanguage, toLanguage } = common_1.getCommons(store);\n        const { name } = store.getState().store;\n        const nameAsProperty = `${string_fn_1.camelCase(name)}Store`;\n        const currentInstance = (store.getState())[nameAsProperty].currentInstance;\n        const textToSpeak = currentInstance[action.payload];\n        const languageToSpeak = action.payload === 'fromPart' ?\n            fromLanguage :\n            toLanguage;\n        speak_1.speak({\n            language: languageToSpeak,\n            text: textToSpeak,\n        }).then(() => {\n            busy = false;\n            observer.complete();\n        });\n    });\n});\n",{"version":3,"file":"/home/just/repos/front/src/root/epics/sharedSpeakEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/root/epics/sharedSpeakEpic.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,yCAAqC;AACrC,gDAA4C;AAC5C,yCAAyC;AACzC,+CAA8C;AAE9C,IAAI,IAAI,GAAG,KAAK,CAAA;AAEH,QAAA,eAAe,GAAG,CAC7B,OAA6C,EAC7C,KAAsB,EACL,EAAE,CACnB,OAAO,CAAC,MAAM,CAAC,wBAAY,CAAC;KACzB,SAAS,CAAC,MAAM,CAAC,EAAE;IAClB,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;QAC5B,CAAC;QAED,IAAI,GAAG,IAAI,CAAA;QACX,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,mBAAU,CAAC,KAAK,CAAC,CAAA;QACtD,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAA;QAEvC,MAAM,cAAc,GAAG,GAAG,qBAAS,CAAC,IAAI,CAAC,OAAO,CAAA;QAChD,MAAM,eAAe,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,eAAe,CAAA;QAE1E,MAAM,WAAW,GAAG,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;QAEnD,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC;YACrD,YAAY,CAAC,CAAC;YACd,UAAU,CAAA;QAEZ,aAAK,CAAC;YACJ,QAAQ,EAAE,eAAe;YACzB,IAAI,EAAE,WAAW;SAClB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACX,IAAI,GAAG,KAAK,CAAA;YAEZ,QAAQ,CAAC,QAAQ,EAAE,CAAA;QACrB,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { camelCase } from 'string-fn'\nimport { speak } from '../../_modules/speak'\nimport { getCommons } from '../../common'\nimport { SHARED_SPEAK } from '../../constants'\n\nlet busy = false\n\nexport const sharedSpeakEpic = (\n  action$: ActionsObservable<SharedSpeakAction>,\n  store: ObservableStore,\n): Observable<any> =>\n  action$.ofType(SHARED_SPEAK)\n    .switchMap(action => {\n      return new Observable(observer => {\n        if (busy) {\n          return observer.complete()\n        }\n\n        busy = true\n        const { fromLanguage, toLanguage } = getCommons(store)\n        const { name } = store.getState().store\n\n        const nameAsProperty = `${camelCase(name)}Store`\n        const currentInstance = (store.getState())[nameAsProperty].currentInstance\n\n        const textToSpeak = currentInstance[action.payload]\n\n        const languageToSpeak = action.payload === 'fromPart' ?\n          fromLanguage :\n          toLanguage\n\n        speak({\n          language: languageToSpeak,\n          text: textToSpeak,\n        }).then(() => {\n          busy = false\n\n          observer.complete()\n        })\n      })\n    })\n"]}]}