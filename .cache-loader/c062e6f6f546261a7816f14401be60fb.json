{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/root/epics/generalEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/root/epics/generalEpic.ts","mtime":1517489161064},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst string_fn_1 = require(\"string-fn\");\nconst constants_1 = require(\"../../constants\");\nfunction getAction(action, store) {\n    switch (action.type) {\n        case constants_1.CHOOSE_WORD_INIT_READY:\n            return { type: constants_1.CHOOSE_WORD_NEXT };\n        case constants_1.LANGUAGE_CHANGE_CLICK:\n            return { type: `${string_fn_1.camelCase(store.getState().store.name)}@INIT` };\n    }\n}\nconst allTypes = [\n    constants_1.LANGUAGE_CHANGE_CLICK,\n    constants_1.CHOOSE_WORD_INIT_READY,\n];\n/**\n * The goal is to reduce the number of epics\n * which only task is to wait for an action and emit a response\n *\n * @param {ActionsObservable<GeneralAction>} action$\n * @param {ObservableStore} store\n */\nexports.generalEpic = (action$, store) => action$\n    .ofType(...allTypes)\n    .map(action => getAction(action, store));\n",{"version":3,"file":"/home/just/repos/front/src/root/epics/generalEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/root/epics/generalEpic.ts"],"names":[],"mappings":";;AACA,yCAAqC;AACrC,+CAIwB;AAExB,mBAAmB,MAAc,EAAE,KAAsB;IACvD,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACpB,KAAK,kCAAsB;YACzB,MAAM,CAAC,EAAE,IAAI,EAAE,4BAAgB,EAAE,CAAA;QACnC,KAAK,iCAAqB;YACxB,MAAM,CAAC,EAAE,IAAI,EAAE,GAAG,qBAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;IACrE,CAAC;AACH,CAAC;AAED,MAAM,QAAQ,GAAmB;IAC/B,iCAAqB;IACrB,kCAAsB;CACvB,CAAA;AAED;;;;;;GAMG;AACU,QAAA,WAAW,GAAG,CACzB,OAAyC,EACzC,KAAsB,EACtB,EAAE,CACF,OAAO;KACJ,MAAM,CAAC,GAAG,QAAQ,CAAC;KACnB,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { camelCase } from 'string-fn'\nimport {\n  CHOOSE_WORD_INIT_READY,\n  CHOOSE_WORD_NEXT,\n  LANGUAGE_CHANGE_CLICK,\n} from '../../constants'\n\nfunction getAction(action: Action, store: ObservableStore): Action {\n  switch (action.type) {\n    case CHOOSE_WORD_INIT_READY:\n      return { type: CHOOSE_WORD_NEXT }\n    case LANGUAGE_CHANGE_CLICK:\n      return { type: `${camelCase(store.getState().store.name)}@INIT` }\n  }\n}\n\nconst allTypes: GeneralTypes[] = [\n  LANGUAGE_CHANGE_CLICK,\n  CHOOSE_WORD_INIT_READY,\n]\n\n/**\n * The goal is to reduce the number of epics\n * which only task is to wait for an action and emit a response\n *\n * @param {ActionsObservable<GeneralAction>} action$\n * @param {ObservableStore} store\n */\nexport const generalEpic = (\n  action$: ActionsObservable<GeneralAction>,\n  store: ObservableStore,\n) =>\n  action$\n    .ofType(...allTypes)\n    .map(action => getAction(action, store))\n"]}]}