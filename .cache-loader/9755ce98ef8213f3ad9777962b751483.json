{"remainingRequest":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/just/repos/front/node_modules/ts-loader/index.js??ref--4-2!/home/just/repos/front/src/learning_meme/epics/checkEpic.ts","dependencies":[{"path":"/home/just/repos/front/src/learning_meme/epics/checkEpic.ts","mtime":1520623274071},{"path":"/home/just/repos/front/node_modules/cache-loader/dist/cjs.js","mtime":1520676156713},{"path":"/home/just/repos/front/node_modules/thread-loader/dist/cjs.js","mtime":1520676204585},{"path":"/home/just/repos/front/node_modules/ts-loader/index.js","mtime":1520676144729}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Observable_1 = require(\"rxjs/Observable\");\nconst string_fn_1 = require(\"string-fn\");\nconst common_1 = require(\"../../common\");\nconst constants_1 = require(\"../../constants\");\nconst actions_1 = require(\"../actions\");\nexports.checkEpic = (action$, store) => action$.ofType(constants_1.LEARNING_MEME_CHECK)\n    .switchMap(action => {\n    return new Observable_1.Observable(observer => {\n        const { textToSpeechFlag, fromLanguage, } = common_1.getCommons(store);\n        const { currentInstance, inputState, } = store.getState().learningMemeStore;\n        const distanceMethod = fromLanguage === 'DE' ?\n            string_fn_1.distanceGerman :\n            string_fn_1.distance;\n        const distanceResult = distanceMethod(inputState.trim(), currentInstance.fromWord);\n        const points = currentInstance.fromWord.length - distanceResult;\n        observer.next(common_1.sharedAddPoints(points));\n        observer.next(actions_1.stop());\n        if (textToSpeechFlag) {\n            observer.next({ type: constants_1.SHARED_SPEAK, payload: 'fromPart' });\n        }\n        observer.complete();\n    });\n});\n",{"version":3,"file":"/home/just/repos/front/src/learning_meme/epics/checkEpic.ts","sourceRoot":"","sources":["/home/just/repos/front/src/learning_meme/epics/checkEpic.ts"],"names":[],"mappings":";;AACA,gDAA4C;AAC5C,yCAAoD;AACpD,yCAA0D;AAC1D,+CAAmE;AACnE,wCAAiC;AAEpB,QAAA,SAAS,GAAG,CACvB,OAAmD,EACnD,KAAsB,EACL,EAAE,CAEnB,OAAO,CAAC,MAAM,CAAC,+BAAmB,CAAC;KAChC,SAAS,CAAC,MAAM,CAAC,EAAE;IAElB,MAAM,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAC/B,MAAM,EACJ,gBAAgB,EAChB,YAAY,GACb,GAAG,mBAAU,CAAC,KAAK,CAAC,CAAA;QAErB,MAAM,EACJ,eAAe,EACf,UAAU,GACX,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,iBAAiB,CAAA;QAEtC,MAAM,cAAc,GAAG,YAAY,KAAK,IAAI,CAAC,CAAC;YAC5C,0BAAc,CAAC,CAAC;YAChB,oBAAQ,CAAA;QAEV,MAAM,cAAc,GAAG,cAAc,CACnC,UAAU,CAAC,IAAI,EAAE,EACjB,eAAe,CAAC,QAAQ,CACzB,CAAA;QAED,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC,MAAM,GAAG,cAAc,CAAA;QAE/D,QAAQ,CAAC,IAAI,CAAC,wBAAe,CAAC,MAAM,CAAC,CAAC,CAAA;QACtC,QAAQ,CAAC,IAAI,CAAC,cAAI,EAAE,CAAC,CAAA;QAErB,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAErB,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,wBAAY,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAA;QAE5D,CAAC;QAED,QAAQ,CAAC,QAAQ,EAAE,CAAA;IACrB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { ActionsObservable } from 'redux-observable'\nimport { Observable } from 'rxjs/Observable'\nimport { distance, distanceGerman } from 'string-fn'\nimport { getCommons, sharedAddPoints } from '../../common'\nimport { LEARNING_MEME_CHECK, SHARED_SPEAK } from '../../constants'\nimport { stop } from '../actions'\n\nexport const checkEpic = (\n  action$: ActionsObservable<LearningMemeCheckAction>,\n  store: ObservableStore,\n): Observable<any> =>\n\n  action$.ofType(LEARNING_MEME_CHECK)\n    .switchMap(action => {\n\n      return new Observable(observer => {\n        const {\n          textToSpeechFlag,\n          fromLanguage,\n        } = getCommons(store)\n\n        const {\n          currentInstance,\n          inputState,\n        } = store.getState().learningMemeStore\n\n        const distanceMethod = fromLanguage === 'DE' ?\n          distanceGerman :\n          distance\n\n        const distanceResult = distanceMethod(\n          inputState.trim(),\n          currentInstance.fromWord,\n        )\n\n        const points = currentInstance.fromWord.length - distanceResult\n\n        observer.next(sharedAddPoints(points))\n        observer.next(stop())\n\n        if (textToSpeechFlag) {\n\n          observer.next({ type: SHARED_SPEAK, payload: 'fromPart' })\n\n        }\n\n        observer.complete()\n      })\n    })\n"]}]}